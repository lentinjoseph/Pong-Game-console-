
startpro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000428  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000428  0000049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000004e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000040  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000462  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001cc  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005af  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000db  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002f2  00000000  00000000  0000123b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  0000152d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e2       	ldi	r30, 0x28	; 40
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a6 3a       	cpi	r26, 0xA6	; 166
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	40 d0       	rcall	.+128    	; 0xca <main>
  4a:	ec c1       	rjmp	.+984    	; 0x424 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <ledon>:
volatile uint8_t led1[6]={224,112,56,28,14,7};
//led pixel activator//
void ledon(uint8_t i,uint8_t j)
{
	
	PORTC=led[i][j];
  4e:	e8 2f       	mov	r30, r24
  50:	f0 e0       	ldi	r31, 0x00	; 0
  52:	83 e0       	ldi	r24, 0x03	; 3
  54:	ee 0f       	add	r30, r30
  56:	ff 1f       	adc	r31, r31
  58:	8a 95       	dec	r24
  5a:	e1 f7       	brne	.-8      	; 0x54 <ledon+0x6>
  5c:	e6 0f       	add	r30, r22
  5e:	f1 1d       	adc	r31, r1
  60:	e0 5a       	subi	r30, 0xA0	; 160
  62:	ff 4f       	sbci	r31, 0xFF	; 255
  64:	80 81       	ld	r24, Z
  66:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  68:	88 ea       	ldi	r24, 0xA8	; 168
  6a:	91 e6       	ldi	r25, 0x61	; 97
  6c:	01 97       	sbiw	r24, 0x01	; 1
  6e:	f1 f7       	brne	.-4      	; 0x6c <ledon+0x1e>
	_delay_ms(100);		//time of led activate on pong board
	
}
  70:	08 95       	ret

00000072 <reset>:
//when reset done clear screen//
void reset(uint8_t i,uint8_t j)
{
	DDRD=0Xff;			//for buzzer//
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	81 bb       	out	0x11, r24	; 17
	PORTD=0X00;
  76:	12 ba       	out	0x12, r1	; 18
  78:	e8 ea       	ldi	r30, 0xA8	; 168
  7a:	f1 e6       	ldi	r31, 0x61	; 97
  7c:	31 97       	sbiw	r30, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <reset+0xa>
	_delay_ms(100);
	PORTD=0XFF;
  80:	82 bb       	out	0x12, r24	; 18
	DDRD=0X00;
  82:	11 ba       	out	0x11, r1	; 17
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	50 e0       	ldi	r21, 0x00	; 0
  88:	a2 ee       	ldi	r26, 0xE2	; 226
  8a:	b4 e0       	ldi	r27, 0x04	; 4
  8c:	14 c0       	rjmp	.+40     	; 0xb6 <reset+0x44>
	
	for(i=0;i<8;i++){		//for clearing screen//
		for(j=0;j<8;j++){
	PORTC=led[i][j];
  8e:	fb 01       	movw	r30, r22
  90:	e2 0f       	add	r30, r18
  92:	f3 1f       	adc	r31, r19
  94:	e0 5a       	subi	r30, 0xA0	; 160
  96:	ff 4f       	sbci	r31, 0xFF	; 255
  98:	80 81       	ld	r24, Z
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	cd 01       	movw	r24, r26
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <reset+0x2c>
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	3f 4f       	sbci	r19, 0xFF	; 255
	_delay_ms(100);
	PORTD=0XFF;
	DDRD=0X00;
	
	for(i=0;i<8;i++){		//for clearing screen//
		for(j=0;j<8;j++){
  a6:	28 30       	cpi	r18, 0x08	; 8
  a8:	31 05       	cpc	r19, r1
  aa:	89 f7       	brne	.-30     	; 0x8e <reset+0x1c>
  ac:	4f 5f       	subi	r20, 0xFF	; 255
  ae:	5f 4f       	sbci	r21, 0xFF	; 255
	PORTD=0X00;
	_delay_ms(100);
	PORTD=0XFF;
	DDRD=0X00;
	
	for(i=0;i<8;i++){		//for clearing screen//
  b0:	48 30       	cpi	r20, 0x08	; 8
  b2:	51 05       	cpc	r21, r1
  b4:	49 f0       	breq	.+18     	; 0xc8 <reset+0x56>
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
		for(j=0;j<8;j++){
	PORTC=led[i][j];
  ba:	ba 01       	movw	r22, r20
  bc:	93 e0       	ldi	r25, 0x03	; 3
  be:	66 0f       	add	r22, r22
  c0:	77 1f       	adc	r23, r23
  c2:	9a 95       	dec	r25
  c4:	e1 f7       	brne	.-8      	; 0xbe <reset+0x4c>
  c6:	e3 cf       	rjmp	.-58     	; 0x8e <reset+0x1c>
  c8:	08 95       	ret

000000ca <main>:

	
}

int main()
{
  ca:	af 92       	push	r10
  cc:	bf 92       	push	r11
  ce:	cf 92       	push	r12
  d0:	df 92       	push	r13
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	0f 92       	push	r0
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
DDRC =0xff; 	//for led matrix input//
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	84 bb       	out	0x14, r24	; 20
//USARTInit(2);	
DDRD=0x00; 			//for input key//
  e8:	11 ba       	out	0x11, r1	; 17
PORTD=0xFF;  // Internal pullup is enable
  ea:	82 bb       	out	0x12, r24	; 18
//unsigned char i;

while(1)		//pong
{
PORTC=0;
PORTC=1;
  ec:	dd 24       	eor	r13, r13
  ee:	d3 94       	inc	r13
PORTC=6;
  f0:	66 e0       	ldi	r22, 0x06	; 6
  f2:	e6 2e       	mov	r14, r22
PORTC=7;
  f4:	57 e0       	ldi	r21, 0x07	; 7
  f6:	f5 2e       	mov	r15, r21
PORTC=8;
  f8:	08 e0       	ldi	r16, 0x08	; 8
PORTC=9;
  fa:	19 e0       	ldi	r17, 0x09	; 9
PORTC=14;
  fc:	be e0       	ldi	r27, 0x0E	; 14
PORTC=15;
  fe:	af e0       	ldi	r26, 0x0F	; 15
PORTC=27;
 100:	fb e1       	ldi	r31, 0x1B	; 27
PORTC=28;
 102:	ec e1       	ldi	r30, 0x1C	; 28
PORTC=35;
 104:	73 e2       	ldi	r23, 0x23	; 35
PORTC=36;
 106:	64 e2       	ldi	r22, 0x24	; 36
PORTC=49;
 108:	51 e3       	ldi	r21, 0x31	; 49
PORTC=54;
 10a:	46 e3       	ldi	r20, 0x36	; 54
//PORTC=57;
PORTC=58;
 10c:	3a e3       	ldi	r19, 0x3A	; 58
PORTC=59;
 10e:	2b e3       	ldi	r18, 0x3B	; 59
PORTC=60;
 110:	9c e3       	ldi	r25, 0x3C	; 60
PORTC=61;
 112:	8d e3       	ldi	r24, 0x3D	; 61
PORTD=0xFF;  // Internal pullup is enable
//unsigned char i;

while(1)		//pong
{
PORTC=0;
 114:	15 ba       	out	0x15, r1	; 21
PORTC=1;
 116:	d5 ba       	out	0x15, r13	; 21
PORTC=6;
 118:	e5 ba       	out	0x15, r14	; 21
PORTC=7;
 11a:	f5 ba       	out	0x15, r15	; 21
PORTC=8;
 11c:	05 bb       	out	0x15, r16	; 21
PORTC=9;
 11e:	15 bb       	out	0x15, r17	; 21
PORTC=14;
 120:	b5 bb       	out	0x15, r27	; 21
PORTC=15;
 122:	a5 bb       	out	0x15, r26	; 21
PORTC=27;
 124:	f5 bb       	out	0x15, r31	; 21
PORTC=28;
 126:	e5 bb       	out	0x15, r30	; 21
PORTC=35;
 128:	75 bb       	out	0x15, r23	; 21
PORTC=36;
 12a:	65 bb       	out	0x15, r22	; 21
PORTC=49;
 12c:	55 bb       	out	0x15, r21	; 21
PORTC=54;
 12e:	45 bb       	out	0x15, r20	; 21
//PORTC=57;
PORTC=58;
 130:	35 bb       	out	0x15, r19	; 21
PORTC=59;
 132:	25 bb       	out	0x15, r18	; 21
PORTC=60;
 134:	95 bb       	out	0x15, r25	; 21
PORTC=61;
 136:	85 bb       	out	0x15, r24	; 21
//PORTC=62;

if(!(PIND & 0x01))  // check whether the switch is pressed or not
 138:	80 99       	sbic	0x10, 0	; 16
 13a:	ec cf       	rjmp	.-40     	; 0x114 <main+0x4a>
{
while(!(PIND & 0x01)); //wait for debounce
 13c:	80 9b       	sbis	0x10, 0	; 16
 13e:	fe cf       	rjmp	.-4      	; 0x13c <main+0x72>

//for acessing led matrix//
uint8_t i=1,j=-1;


DDRB=0Xff;		//for pad//
 140:	dd 24       	eor	r13, r13
 142:	da 94       	dec	r13
volatile uint8_t m=2;	
 144:	42 e0       	ldi	r20, 0x02	; 2
 146:	c4 2e       	mov	r12, r20
 148:	08 ea       	ldi	r16, 0xA8	; 168
 14a:	11 e6       	ldi	r17, 0x61	; 97

m--;
PORTB=led1[m];

if(m<=0)
m=1;
 14c:	3a ef       	ldi	r19, 0xFA	; 250
 14e:	e3 2e       	mov	r14, r19
 150:	f1 2c       	mov	r15, r1
 152:	bb 24       	eor	r11, r11
 154:	b3 94       	inc	r11
{

m++;
PORTB=led1[m];
if(m>=5)
m=4;
 156:	24 e0       	ldi	r18, 0x04	; 4
 158:	a2 2e       	mov	r10, r18

//for acessing led matrix//
uint8_t i=1,j=-1;


DDRB=0Xff;		//for pad//
 15a:	d7 ba       	out	0x17, r13	; 23
volatile uint8_t m=2;	
 15c:	c9 82       	std	Y+1, r12	; 0x01

PORTB=0XFF;
 15e:	d8 ba       	out	0x18, r13	; 24
 160:	c8 01       	movw	r24, r16
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x98>
_delay_ms(100);
PORTB=led1[2]; //initial pad position//
 166:	80 91 a2 00 	lds	r24, 0x00A2
 16a:	88 bb       	out	0x18, r24	; 24
volatile uint8_t led1[6]={224,112,56,28,14,7};
//led pixel activator//
void ledon(uint8_t i,uint8_t j)
{
	
	PORTC=led[i][j];
 16c:	80 91 87 00 	lds	r24, 0x0087
 170:	85 bb       	out	0x15, r24	; 21
 172:	c8 01       	movw	r24, r16
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0xaa>
 178:	c8 01       	movw	r24, r16
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0xb0>
 17e:	74 e0       	ldi	r23, 0x04	; 4
 180:	57 e0       	ldi	r21, 0x07	; 7
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	6f ef       	ldi	r22, 0xFF	; 255
 186:	e7 2f       	mov	r30, r23
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	93 e0       	ldi	r25, 0x03	; 3
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	9a 95       	dec	r25
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0xc2>
 194:	e5 0f       	add	r30, r21
 196:	f1 1d       	adc	r31, r1
 198:	e0 5a       	subi	r30, 0xA0	; 160
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	80 81       	ld	r24, Z
 19e:	85 bb       	out	0x15, r24	; 21
 1a0:	c8 01       	movw	r24, r16
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0xd8>
  
//acessing each led
ledon(row,col); 

//row and colomn algorithm
row=row+i;
 1a6:	74 0f       	add	r23, r20
col=col+j;
 1a8:	56 0f       	add	r21, r22
volatile uint8_t led1[6]={224,112,56,28,14,7};
//led pixel activator//
void ledon(uint8_t i,uint8_t j)
{
	
	PORTC=led[i][j];
 1aa:	a7 2f       	mov	r26, r23
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	25 2f       	mov	r18, r21
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	fd 01       	movw	r30, r26
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	8a 95       	dec	r24
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0xec>
 1be:	e2 0f       	add	r30, r18
 1c0:	f3 1f       	adc	r31, r19
 1c2:	e0 5a       	subi	r30, 0xA0	; 160
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 81       	ld	r24, Z
 1c8:	85 bb       	out	0x15, r24	; 21
 1ca:	c8 01       	movw	r24, r16
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0x102>
row=row+i;
col=col+j;
ledon(row,col);


if(row==7)              //last row condition
 1d0:	77 30       	cpi	r23, 0x07	; 7
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <main+0x10c>
 1d4:	8f c0       	rjmp	.+286    	; 0x2f4 <main+0x22a>
	{
	
	if(led[row][col]==56)
 1d6:	80 81       	ld	r24, Z
 1d8:	88 33       	cpi	r24, 0x38	; 56
 1da:	21 f4       	brne	.+8      	; 0x1e4 <main+0x11a>
	{
		portb=PORTB;
 1dc:	88 b3       	in	r24, 0x18	; 24
			if((portb==224))
 1de:	80 3e       	cpi	r24, 0xE0	; 224
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <main+0x11a>
 1e2:	e9 c0       	rjmp	.+466    	; 0x3b6 <main+0x2ec>
				
							
				break;
			}
			}
	if(led[row][col]==57)
 1e4:	fd 01       	movw	r30, r26
 1e6:	93 e0       	ldi	r25, 0x03	; 3
 1e8:	ee 0f       	add	r30, r30
 1ea:	ff 1f       	adc	r31, r31
 1ec:	9a 95       	dec	r25
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x11e>
 1f0:	e2 0f       	add	r30, r18
 1f2:	f3 1f       	adc	r31, r19
 1f4:	e0 5a       	subi	r30, 0xA0	; 160
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	80 81       	ld	r24, Z
 1fa:	89 33       	cpi	r24, 0x39	; 57
 1fc:	31 f4       	brne	.+12     	; 0x20a <main+0x140>
		{
		portb=PORTB;
 1fe:	88 b3       	in	r24, 0x18	; 24
			if((portb==224) || (portb==112))
 200:	80 3e       	cpi	r24, 0xE0	; 224
 202:	19 f0       	breq	.+6      	; 0x20a <main+0x140>
 204:	80 37       	cpi	r24, 0x70	; 112
 206:	09 f0       	breq	.+2      	; 0x20a <main+0x140>
 208:	d6 c0       	rjmp	.+428    	; 0x3b6 <main+0x2ec>
							
				break;
			}
			}	
//i=-1;
	if(led[row][col]==58)
 20a:	fd 01       	movw	r30, r26
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	8a 95       	dec	r24
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x144>
 216:	e2 0f       	add	r30, r18
 218:	f3 1f       	adc	r31, r19
 21a:	e0 5a       	subi	r30, 0xA0	; 160
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	80 81       	ld	r24, Z
 220:	8a 33       	cpi	r24, 0x3A	; 58
 222:	41 f4       	brne	.+16     	; 0x234 <main+0x16a>
		{
		portb=PORTB;
 224:	88 b3       	in	r24, 0x18	; 24
			if((portb==224) || (portb==112) || (portb==56))
 226:	80 3e       	cpi	r24, 0xE0	; 224
 228:	29 f0       	breq	.+10     	; 0x234 <main+0x16a>
 22a:	80 37       	cpi	r24, 0x70	; 112
 22c:	19 f0       	breq	.+6      	; 0x234 <main+0x16a>
 22e:	88 33       	cpi	r24, 0x38	; 56
 230:	09 f0       	breq	.+2      	; 0x234 <main+0x16a>
 232:	c1 c0       	rjmp	.+386    	; 0x3b6 <main+0x2ec>
					reset(i,j);
				
							
				break;
			}	}
if(led[row][col]==59)
 234:	fd 01       	movw	r30, r26
 236:	93 e0       	ldi	r25, 0x03	; 3
 238:	ee 0f       	add	r30, r30
 23a:	ff 1f       	adc	r31, r31
 23c:	9a 95       	dec	r25
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0x16e>
 240:	e2 0f       	add	r30, r18
 242:	f3 1f       	adc	r31, r19
 244:	e0 5a       	subi	r30, 0xA0	; 160
 246:	ff 4f       	sbci	r31, 0xFF	; 255
 248:	80 81       	ld	r24, Z
 24a:	8b 33       	cpi	r24, 0x3B	; 59
 24c:	41 f4       	brne	.+16     	; 0x25e <main+0x194>
		{
		portb=PORTB;
 24e:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==112) || (portb==56))
 250:	8c 31       	cpi	r24, 0x1C	; 28
 252:	29 f0       	breq	.+10     	; 0x25e <main+0x194>
 254:	80 37       	cpi	r24, 0x70	; 112
 256:	19 f0       	breq	.+6      	; 0x25e <main+0x194>
 258:	88 33       	cpi	r24, 0x38	; 56
 25a:	09 f0       	breq	.+2      	; 0x25e <main+0x194>
 25c:	ac c0       	rjmp	.+344    	; 0x3b6 <main+0x2ec>
				break;
			
			}	
}

if(led[row][col]==60)
 25e:	fd 01       	movw	r30, r26
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	8a 95       	dec	r24
 268:	e1 f7       	brne	.-8      	; 0x262 <main+0x198>
 26a:	e2 0f       	add	r30, r18
 26c:	f3 1f       	adc	r31, r19
 26e:	e0 5a       	subi	r30, 0xA0	; 160
 270:	ff 4f       	sbci	r31, 0xFF	; 255
 272:	80 81       	ld	r24, Z
 274:	8c 33       	cpi	r24, 0x3C	; 60
 276:	41 f4       	brne	.+16     	; 0x288 <main+0x1be>
		{
		portb=PORTB;
 278:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==14) || (portb==56))
 27a:	8c 31       	cpi	r24, 0x1C	; 28
 27c:	29 f0       	breq	.+10     	; 0x288 <main+0x1be>
 27e:	8e 30       	cpi	r24, 0x0E	; 14
 280:	19 f0       	breq	.+6      	; 0x288 <main+0x1be>
 282:	88 33       	cpi	r24, 0x38	; 56
 284:	09 f0       	breq	.+2      	; 0x288 <main+0x1be>
 286:	97 c0       	rjmp	.+302    	; 0x3b6 <main+0x2ec>
				
							
				break;
			
			}}
if(led[row][col]==61)
 288:	fd 01       	movw	r30, r26
 28a:	93 e0       	ldi	r25, 0x03	; 3
 28c:	ee 0f       	add	r30, r30
 28e:	ff 1f       	adc	r31, r31
 290:	9a 95       	dec	r25
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x1c2>
 294:	e2 0f       	add	r30, r18
 296:	f3 1f       	adc	r31, r19
 298:	e0 5a       	subi	r30, 0xA0	; 160
 29a:	ff 4f       	sbci	r31, 0xFF	; 255
 29c:	80 81       	ld	r24, Z
 29e:	8d 33       	cpi	r24, 0x3D	; 61
 2a0:	41 f4       	brne	.+16     	; 0x2b2 <main+0x1e8>
		{
		portb=PORTB;
 2a2:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==14) || (portb==7))
 2a4:	8c 31       	cpi	r24, 0x1C	; 28
 2a6:	29 f0       	breq	.+10     	; 0x2b2 <main+0x1e8>
 2a8:	8e 30       	cpi	r24, 0x0E	; 14
 2aa:	19 f0       	breq	.+6      	; 0x2b2 <main+0x1e8>
 2ac:	87 30       	cpi	r24, 0x07	; 7
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <main+0x1e8>
 2b0:	82 c0       	rjmp	.+260    	; 0x3b6 <main+0x2ec>
							
				break;
			
				}	
	}
if(led[row][col]==62)
 2b2:	fd 01       	movw	r30, r26
 2b4:	83 e0       	ldi	r24, 0x03	; 3
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	8a 95       	dec	r24
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <main+0x1ec>
 2be:	e2 0f       	add	r30, r18
 2c0:	f3 1f       	adc	r31, r19
 2c2:	e0 5a       	subi	r30, 0xA0	; 160
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	80 81       	ld	r24, Z
 2c8:	8e 33       	cpi	r24, 0x3E	; 62
 2ca:	31 f4       	brne	.+12     	; 0x2d8 <main+0x20e>
		{
		portb=PORTB;
 2cc:	88 b3       	in	r24, 0x18	; 24
			if((portb==14) || (portb==7))
 2ce:	8e 30       	cpi	r24, 0x0E	; 14
 2d0:	19 f0       	breq	.+6      	; 0x2d8 <main+0x20e>
 2d2:	87 30       	cpi	r24, 0x07	; 7
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <main+0x20e>
 2d6:	6f c0       	rjmp	.+222    	; 0x3b6 <main+0x2ec>
				
							
				break;
			
			}}	
if(led[row][col]==63)
 2d8:	e3 e0       	ldi	r30, 0x03	; 3
 2da:	aa 0f       	add	r26, r26
 2dc:	bb 1f       	adc	r27, r27
 2de:	ea 95       	dec	r30
 2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0x210>
 2e2:	a2 0f       	add	r26, r18
 2e4:	b3 1f       	adc	r27, r19
 2e6:	a0 5a       	subi	r26, 0xA0	; 160
 2e8:	bf 4f       	sbci	r27, 0xFF	; 255
 2ea:	8c 91       	ld	r24, X
 2ec:	8f 33       	cpi	r24, 0x3F	; 63
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <main+0x228>
 2f0:	65 c0       	rjmp	.+202    	; 0x3bc <main+0x2f2>
 2f2:	5e c0       	rjmp	.+188    	; 0x3b0 <main+0x2e6>
	PORTD =0;*/



	}
if(row==0)				//1st row condition
 2f4:	77 23       	and	r23, r23
 2f6:	09 f0       	breq	.+2      	; 0x2fa <main+0x230>
 2f8:	62 c0       	rjmp	.+196    	; 0x3be <main+0x2f4>
	{
	
	if(led[row][col]==0)
 2fa:	f9 01       	movw	r30, r18
 2fc:	e0 5a       	subi	r30, 0xA0	; 160
 2fe:	ff 4f       	sbci	r31, 0xFF	; 255
 300:	80 81       	ld	r24, Z
 302:	88 23       	and	r24, r24
 304:	21 f4       	brne	.+8      	; 0x30e <main+0x244>
	{
		portb=PORTB;
 306:	88 b3       	in	r24, 0x18	; 24
			if((portb==224))
 308:	80 3e       	cpi	r24, 0xE0	; 224
 30a:	09 f0       	breq	.+2      	; 0x30e <main+0x244>
 30c:	54 c0       	rjmp	.+168    	; 0x3b6 <main+0x2ec>
				
							
				break;
			}
			}
	if(led[row][col]==1)
 30e:	f9 01       	movw	r30, r18
 310:	e0 5a       	subi	r30, 0xA0	; 160
 312:	ff 4f       	sbci	r31, 0xFF	; 255
 314:	80 81       	ld	r24, Z
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	31 f4       	brne	.+12     	; 0x326 <main+0x25c>
		{
		portb=PORTB;
 31a:	88 b3       	in	r24, 0x18	; 24
			if((portb==224) || (portb==112))
 31c:	80 3e       	cpi	r24, 0xE0	; 224
 31e:	19 f0       	breq	.+6      	; 0x326 <main+0x25c>
 320:	80 37       	cpi	r24, 0x70	; 112
 322:	09 f0       	breq	.+2      	; 0x326 <main+0x25c>
 324:	48 c0       	rjmp	.+144    	; 0x3b6 <main+0x2ec>
							
				break;
			}
			}	

	if(led[row][col]==2)
 326:	f9 01       	movw	r30, r18
 328:	e0 5a       	subi	r30, 0xA0	; 160
 32a:	ff 4f       	sbci	r31, 0xFF	; 255
 32c:	80 81       	ld	r24, Z
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	39 f4       	brne	.+14     	; 0x340 <main+0x276>
		{
		portb=PORTB;
 332:	88 b3       	in	r24, 0x18	; 24
			if((portb==224) || (portb==112) || (portb==56))
 334:	80 3e       	cpi	r24, 0xE0	; 224
 336:	21 f0       	breq	.+8      	; 0x340 <main+0x276>
 338:	80 37       	cpi	r24, 0x70	; 112
 33a:	11 f0       	breq	.+4      	; 0x340 <main+0x276>
 33c:	88 33       	cpi	r24, 0x38	; 56
 33e:	d9 f5       	brne	.+118    	; 0x3b6 <main+0x2ec>
					reset(i,j);
				
							
				break;
			}	}
if(led[row][col]==3)
 340:	f9 01       	movw	r30, r18
 342:	e0 5a       	subi	r30, 0xA0	; 160
 344:	ff 4f       	sbci	r31, 0xFF	; 255
 346:	80 81       	ld	r24, Z
 348:	83 30       	cpi	r24, 0x03	; 3
 34a:	39 f4       	brne	.+14     	; 0x35a <main+0x290>
		{
		portb=PORTB;
 34c:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==112) || (portb==56))
 34e:	8c 31       	cpi	r24, 0x1C	; 28
 350:	21 f0       	breq	.+8      	; 0x35a <main+0x290>
 352:	80 37       	cpi	r24, 0x70	; 112
 354:	11 f0       	breq	.+4      	; 0x35a <main+0x290>
 356:	88 33       	cpi	r24, 0x38	; 56
 358:	71 f5       	brne	.+92     	; 0x3b6 <main+0x2ec>
				break;
			
			}	
}

if(led[row][col]==4)
 35a:	f9 01       	movw	r30, r18
 35c:	e0 5a       	subi	r30, 0xA0	; 160
 35e:	ff 4f       	sbci	r31, 0xFF	; 255
 360:	80 81       	ld	r24, Z
 362:	84 30       	cpi	r24, 0x04	; 4
 364:	39 f4       	brne	.+14     	; 0x374 <main+0x2aa>
		{
		portb=PORTB;
 366:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==14) || (portb==56))
 368:	8c 31       	cpi	r24, 0x1C	; 28
 36a:	21 f0       	breq	.+8      	; 0x374 <main+0x2aa>
 36c:	8e 30       	cpi	r24, 0x0E	; 14
 36e:	11 f0       	breq	.+4      	; 0x374 <main+0x2aa>
 370:	88 33       	cpi	r24, 0x38	; 56
 372:	09 f5       	brne	.+66     	; 0x3b6 <main+0x2ec>
				
							
				break;
			
			}}
if(led[row][col]==5)
 374:	f9 01       	movw	r30, r18
 376:	e0 5a       	subi	r30, 0xA0	; 160
 378:	ff 4f       	sbci	r31, 0xFF	; 255
 37a:	80 81       	ld	r24, Z
 37c:	85 30       	cpi	r24, 0x05	; 5
 37e:	39 f4       	brne	.+14     	; 0x38e <main+0x2c4>
		{
		portb=PORTB;
 380:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==14) || (portb==7))
 382:	8c 31       	cpi	r24, 0x1C	; 28
 384:	21 f0       	breq	.+8      	; 0x38e <main+0x2c4>
 386:	8e 30       	cpi	r24, 0x0E	; 14
 388:	11 f0       	breq	.+4      	; 0x38e <main+0x2c4>
 38a:	87 30       	cpi	r24, 0x07	; 7
 38c:	a1 f4       	brne	.+40     	; 0x3b6 <main+0x2ec>
							
				break;
			
				}	
	}
if(led[row][col]==6)
 38e:	f9 01       	movw	r30, r18
 390:	e0 5a       	subi	r30, 0xA0	; 160
 392:	ff 4f       	sbci	r31, 0xFF	; 255
 394:	80 81       	ld	r24, Z
 396:	86 30       	cpi	r24, 0x06	; 6
 398:	29 f4       	brne	.+10     	; 0x3a4 <main+0x2da>
		{
		portb=PORTB;
 39a:	88 b3       	in	r24, 0x18	; 24
			if((portb==14) || (portb==7))
 39c:	8e 30       	cpi	r24, 0x0E	; 14
 39e:	11 f0       	breq	.+4      	; 0x3a4 <main+0x2da>
 3a0:	87 30       	cpi	r24, 0x07	; 7
 3a2:	49 f4       	brne	.+18     	; 0x3b6 <main+0x2ec>
				
							
				break;
			
			}}	
if(led[row][col]==7)
 3a4:	20 5a       	subi	r18, 0xA0	; 160
 3a6:	3f 4f       	sbci	r19, 0xFF	; 255
 3a8:	f9 01       	movw	r30, r18
 3aa:	80 81       	ld	r24, Z
 3ac:	87 30       	cpi	r24, 0x07	; 7
 3ae:	31 f4       	brne	.+12     	; 0x3bc <main+0x2f2>
		{
		portb=PORTB;
 3b0:	88 b3       	in	r24, 0x18	; 24
			if((portb==7))
 3b2:	87 30       	cpi	r24, 0x07	; 7
 3b4:	19 f0       	breq	.+6      	; 0x3bc <main+0x2f2>
				_delay_ms(10);
				PORTD =0;*/
			}	
			else{
		
					reset(i,j);
 3b6:	84 2f       	mov	r24, r20
 3b8:	5c de       	rcall	.-840    	; 0x72 <reset>
 3ba:	cf ce       	rjmp	.-610    	; 0x15a <main+0x90>



	
	row=0;
	i=-i;
 3bc:	41 95       	neg	r20
	/*PORTD =0XFF;
	_delay_ms(5);
	PORTD =0;*/
	}
if(col==0)			//left side column
 3be:	55 23       	and	r21, r21
 3c0:	19 f4       	brne	.+6      	; 0x3c8 <main+0x2fe>
	{
	col=1;
	j=-j;
 3c2:	61 95       	neg	r22
 3c4:	51 e0       	ldi	r21, 0x01	; 1
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <main+0x306>
	/*PORTD =0XFF;
	_delay_ms(5);
	PORTD =0;*/	
	}
if(col==7)		//right side column
 3c8:	57 30       	cpi	r21, 0x07	; 7
 3ca:	11 f4       	brne	.+4      	; 0x3d0 <main+0x306>
	{
	col=6;
	j=-j;
 3cc:	61 95       	neg	r22
 3ce:	56 e0       	ldi	r21, 0x06	; 6
	/*PORTD =0XFF;
	_delay_ms(5);
	PORTD =0;*/	
	}
if(!(PIND & 0x01))  // check whether the switch is pressed or not
 3d0:	80 99       	sbic	0x10, 0	; 16
 3d2:	12 c0       	rjmp	.+36     	; 0x3f8 <main+0x32e>
 3d4:	c7 01       	movw	r24, r14
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <main+0x30c>

{
_delay_ms(1);
//while(!(PIND & 0x01)); //wait for debounce

if(!(PIND & 0x01))
 3da:	80 99       	sbic	0x10, 0	; 16
 3dc:	0d c0       	rjmp	.+26     	; 0x3f8 <main+0x32e>
{

m++;
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	8f 5f       	subi	r24, 0xFF	; 255
 3e2:	89 83       	std	Y+1, r24	; 0x01
PORTB=led1[m];
 3e4:	e9 81       	ldd	r30, Y+1	; 0x01
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	e0 56       	subi	r30, 0x60	; 96
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	80 81       	ld	r24, Z
 3ee:	88 bb       	out	0x18, r24	; 24
if(m>=5)
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	85 30       	cpi	r24, 0x05	; 5
 3f4:	08 f0       	brcs	.+2      	; 0x3f8 <main+0x32e>
m=4;
 3f6:	a9 82       	std	Y+1, r10	; 0x01
//_delay_ms(1);   // On for a half second

} 
}
if(!(PIND & 0x02))  // check whether the switch is pressed or not
 3f8:	81 99       	sbic	0x10, 1	; 16
 3fa:	c5 ce       	rjmp	.-630    	; 0x186 <main+0xbc>
 3fc:	c7 01       	movw	r24, r14
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <main+0x334>

{
_delay_ms(1);
if(!(PIND & 0x02))
 402:	81 99       	sbic	0x10, 1	; 16
 404:	c0 ce       	rjmp	.-640    	; 0x186 <main+0xbc>
{
//while(!(PIND & 0x02)); //wait for debounce


m--;
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	81 50       	subi	r24, 0x01	; 1
 40a:	89 83       	std	Y+1, r24	; 0x01
PORTB=led1[m];
 40c:	e9 81       	ldd	r30, Y+1	; 0x01
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	e0 56       	subi	r30, 0x60	; 96
 412:	ff 4f       	sbci	r31, 0xFF	; 255
 414:	80 81       	ld	r24, Z
 416:	88 bb       	out	0x18, r24	; 24

if(m<=0)
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	88 23       	and	r24, r24
 41c:	09 f0       	breq	.+2      	; 0x420 <main+0x356>
 41e:	b3 ce       	rjmp	.-666    	; 0x186 <main+0xbc>
m=1;
 420:	b9 82       	std	Y+1, r11	; 0x01
 422:	b1 ce       	rjmp	.-670    	; 0x186 <main+0xbc>

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
