
startprojlcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000502  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  00000502  00000596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000f2  008000f2  00000628  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000011c  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a66  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000322  00000000  00000000  000011ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000802  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001bf  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000403  00000000  00000000  00001f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000023a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e0       	ldi	r30, 0x02	; 2
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 3f       	cpi	r26, 0xF2	; 242
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 ef       	ldi	r26, 0xF2	; 242
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 3f       	cpi	r26, 0xF8	; 248
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	15 d0       	rcall	.+42     	; 0x84 <main>
  5a:	51 c2       	rjmp	.+1186   	; 0x4fe <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <USARTInit>:

void USARTInit(uint16_t ubrr_value)
{

   //Set Baud rate
   UBRRL = ubrr_value;
  5e:	89 b9       	out	0x09, r24	; 9
   UBRRH = (ubrr_value>>8);
  60:	90 bd       	out	0x20, r25	; 32
   >> 1 StopBit
   >> char size 8

   */

   UCSRC=(1<<URSEL)|(3<<UCSZ0);
  62:	86 e8       	ldi	r24, 0x86	; 134
  64:	80 bd       	out	0x20, r24	; 32


   //Enable The receiver and transmitter
   UCSRB=(1<<RXEN)|(1<<TXEN);
  66:	88 e1       	ldi	r24, 0x18	; 24
  68:	8a b9       	out	0x0a, r24	; 10


}
  6a:	08 95       	ret

0000006c <USARTReadChar>:
//from USART. This function will wait untill data is
//available.
uint8_t USARTReadChar()
{
	//Wait untill a data is available
	while(!(UCSRA & (1<<RXC)))
  6c:	5f 9b       	sbis	0x0b, 7	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <USARTReadChar>
	}

	//Now USART has got data from host
	//and is available is buffer

	return UDR;
  70:	8c b1       	in	r24, 0x0c	; 12
}
  72:	08 95       	ret

00000074 <USARTWritechar>:
//This fuction writes the given "data" to
//the USART which then transmit it via TX line
void USARTWritechar(unsigned char data)
{
	//Wait untill the transmitter is ready
	while(!(UCSRA & (1<<UDRE)))
  74:	5d 9b       	sbis	0x0b, 5	; 11
  76:	fe cf       	rjmp	.-4      	; 0x74 <USARTWritechar>
		//Do nothing
	}

	//Now write the data to USART buffer

	UDR=data;
  78:	8c b9       	out	0x0c, r24	; 12
}
  7a:	08 95       	ret

0000007c <USARTReadNo>:
uint8_t USARTReadNo()
{
	//Wait untill a data is available
	while(!(UCSRA & (1<<RXC)))
  7c:	5f 9b       	sbis	0x0b, 7	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <USARTReadNo>
	}

	//Now USART has got data from host
	//and is available is buffer

	return UDR;
  80:	8c b1       	in	r24, 0x0c	; 12
}
  82:	08 95       	ret

00000084 <main>:

int main()
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29

void USARTInit(uint16_t ubrr_value)
{

   //Set Baud rate
   UBRRL = ubrr_value;
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	89 b9       	out	0x09, r24	; 9
   UBRRH = (ubrr_value>>8);
  8c:	10 bc       	out	0x20, r1	; 32
   >> 1 StopBit
   >> char size 8

   */

   UCSRC=(1<<URSEL)|(3<<UCSZ0);
  8e:	86 e8       	ldi	r24, 0x86	; 134
  90:	80 bd       	out	0x20, r24	; 32


   //Enable The receiver and transmitter
   UCSRB=(1<<RXEN)|(1<<TXEN);
  92:	88 e1       	ldi	r24, 0x18	; 24
  94:	8a b9       	out	0x0a, r24	; 10

	USARTInit(2);		//UBRR = 2
	//unsigned char i;

	//Initialize LCD module
	InitLCD(0);
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	67 d1       	rcall	.+718    	; 0x368 <InitLCD>

	//Clear the screen
	LCDClear();
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	3d d1       	rcall	.+634    	; 0x31a <LCDByte>
		LCDWriteStringXY(0,0,"***YOU  WIN***");
		LCDWriteStringXY(0,1,"Congrats.. :-)");
		}
		}*/
	//Simple string printing
	LCDWriteStringXY(2,0,"Welcome");
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	f1 d1       	rcall	.+994    	; 0x488 <LCDGotoXY>
  a6:	80 e6       	ldi	r24, 0x60	; 96
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	86 d1       	rcall	.+780    	; 0x3b8 <LCDWriteString>
	LCDWriteStringXY(10,0,"To");
  ac:	8a e0       	ldi	r24, 0x0A	; 10
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	eb d1       	rcall	.+982    	; 0x488 <LCDGotoXY>
  b2:	88 e6       	ldi	r24, 0x68	; 104
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	80 d1       	rcall	.+768    	; 0x3b8 <LCDWriteString>
  b8:	80 e2       	ldi	r24, 0x20	; 32
  ba:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	29 e1       	ldi	r18, 0x19	; 25
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x3e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c8:	d9 f7       	brne	.-10     	; 0xc0 <main+0x3c>
	_delay_ms(2000);
	LCDClear();
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	25 d1       	rcall	.+586    	; 0x31a <LCDByte>
	LCDWriteStringXY(2,0,"Pong Gaming")
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	d9 d1       	rcall	.+946    	; 0x488 <LCDGotoXY>
  d6:	8b e6       	ldi	r24, 0x6B	; 107
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	6e d1       	rcall	.+732    	; 0x3b8 <LCDWriteString>
	LCDWriteStringXY(4,2,"Console");
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	62 e0       	ldi	r22, 0x02	; 2
  e0:	d3 d1       	rcall	.+934    	; 0x488 <LCDGotoXY>
  e2:	87 e7       	ldi	r24, 0x77	; 119
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	68 d1       	rcall	.+720    	; 0x3b8 <LCDWriteString>
  e8:	80 e3       	ldi	r24, 0x30	; 48
  ea:	95 e7       	ldi	r25, 0x75	; 117
  ec:	29 e1       	ldi	r18, 0x19	; 25
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	f9 01       	movw	r30, r18
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f8:	d9 f7       	brne	.-10     	; 0xf0 <main+0x6c>
	_delay_ms(3000);
	LCDClear();
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	0d d1       	rcall	.+538    	; 0x31a <LCDByte>
	//A string on line 2
	LCDWriteStringXY(4,0,"Loading ");
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	c1 d1       	rcall	.+898    	; 0x488 <LCDGotoXY>
 106:	8f e7       	ldi	r24, 0x7F	; 127
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	56 d1       	rcall	.+684    	; 0x3b8 <LCDWriteString>

//Print some numbers
	for (i=0;i<=100;i+=1)
 10c:	10 92 f2 00 	sts	0x00F2, r1
 110:	c4 ed       	ldi	r28, 0xD4	; 212
 112:	d0 e3       	ldi	r29, 0x30	; 48
 114:	28 c0       	rjmp	.+80     	; 0x166 <main+0xe2>
	{
		LCDWriteIntXY(13,1,i,2);
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	b6 d1       	rcall	.+876    	; 0x488 <LCDGotoXY>
 11c:	80 91 f2 00 	lds	r24, 0x00F2
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	62 e0       	ldi	r22, 0x02	; 2
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	55 d1       	rcall	.+682    	; 0x3d2 <LCDWriteInt>
		LCDWriteStringXY(15,1,"%");
 128:	8f e0       	ldi	r24, 0x0F	; 15
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	ad d1       	rcall	.+858    	; 0x488 <LCDGotoXY>
 12e:	88 e8       	ldi	r24, 0x88	; 136
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	42 d1       	rcall	.+644    	; 0x3b8 <LCDWriteString>
 134:	ce 01       	movw	r24, r28
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0xb2>
		_delay_ms(50);
		if(i%10==0)
 13a:	80 91 f2 00 	lds	r24, 0x00F2
 13e:	6a e0       	ldi	r22, 0x0A	; 10
 140:	ab d1       	rcall	.+854    	; 0x498 <__udivmodqi4>
 142:	99 23       	and	r25, r25
 144:	59 f4       	brne	.+22     	; 0x15c <main+0xd8>
		LCDWriteStringXY(j++,1,"|");	
 146:	80 91 f3 00 	lds	r24, 0x00F3
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	80 93 f3 00 	sts	0x00F3, r24
 150:	81 50       	subi	r24, 0x01	; 1
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	99 d1       	rcall	.+818    	; 0x488 <LCDGotoXY>
 156:	8a e8       	ldi	r24, 0x8A	; 138
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	2e d1       	rcall	.+604    	; 0x3b8 <LCDWriteString>
	LCDClear();
	//A string on line 2
	LCDWriteStringXY(4,0,"Loading ");

//Print some numbers
	for (i=0;i<=100;i+=1)
 15c:	80 91 f2 00 	lds	r24, 0x00F2
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 93 f2 00 	sts	0x00F2, r24
 166:	80 91 f2 00 	lds	r24, 0x00F2
 16a:	85 36       	cpi	r24, 0x65	; 101
 16c:	a0 f2       	brcs	.-88     	; 0x116 <main+0x92>


	}

	//Clear the screen
	LCDClear();
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	d3 d0       	rcall	.+422    	; 0x31a <LCDByte>
 174:	80 e1       	ldi	r24, 0x10	; 16
 176:	97 e2       	ldi	r25, 0x27	; 39
 178:	29 e1       	ldi	r18, 0x19	; 25
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	f9 01       	movw	r30, r18
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0xfa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 182:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 184:	d9 f7       	brne	.-10     	; 0x17c <main+0xf8>

	_delay_ms(1000);

	LCDWriteStringXY(3,0,"Lets");
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	7e d1       	rcall	.+764    	; 0x488 <LCDGotoXY>
 18c:	8c e8       	ldi	r24, 0x8C	; 140
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	13 d1       	rcall	.+550    	; 0x3b8 <LCDWriteString>
	LCDWriteStringXY(8,1,"Play");
 192:	88 e0       	ldi	r24, 0x08	; 8
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	78 d1       	rcall	.+752    	; 0x488 <LCDGotoXY>
 198:	81 e9       	ldi	r24, 0x91	; 145
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0d d1       	rcall	.+538    	; 0x3b8 <LCDWriteString>
 19e:	80 e1       	ldi	r24, 0x10	; 16
 1a0:	97 e2       	ldi	r25, 0x27	; 39
 1a2:	29 e1       	ldi	r18, 0x19	; 25
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	f9 01       	movw	r30, r18
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <main+0x122>
//This fuction writes the given "data" to
//the USART which then transmit it via TX line
void USARTWritechar(unsigned char data)
{
	//Wait untill the transmitter is ready
	while(!(UCSRA & (1<<UDRE)))
 1b0:	5d 9b       	sbis	0x0b, 5	; 11
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <main+0x12c>
		//Do nothing
	}

	//Now write the data to USART buffer

	UDR=data;
 1b4:	81 e6       	ldi	r24, 0x61	; 97
 1b6:	8c b9       	out	0x0c, r24	; 12
 1b8:	88 ea       	ldi	r24, 0xA8	; 168
 1ba:	91 e6       	ldi	r25, 0x61	; 97
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x138>
	LCDWriteStringXY(3,0,"Lets");
	LCDWriteStringXY(8,1,"Play");
	_delay_ms(1000);
	USARTWritechar('a');
	_delay_ms(100);
	LCDClear();
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	aa d0       	rcall	.+340    	; 0x31a <LCDByte>
//from USART. This function will wait untill data is
//available.
uint8_t USARTReadChar()
{
	//Wait untill a data is available
	while(!(UCSRA & (1<<RXC)))
 1c6:	5f 9b       	sbis	0x0b, 7	; 11
 1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <main+0x142>
	}

	//Now USART has got data from host
	//and is available is buffer

	return UDR;
 1ca:	9c b1       	in	r25, 0x0c	; 12
	/*LCDWriteString("SCORE:");
	LCDWriteStringXY(0,1,"LEVEL:");
	LCDWriteStringXY(9,0,"PONG:");*/
	while(1){

	sco=USARTReadChar();
 1cc:	90 93 f7 00 	sts	0x00F7, r25
	
	 if(sco=='s')
 1d0:	93 37       	cpi	r25, 0x73	; 115
 1d2:	31 f4       	brne	.+12     	; 0x1e0 <main+0x15c>
	UDR=data;
}
uint8_t USARTReadNo()
{
	//Wait untill a data is available
	while(!(UCSRA & (1<<RXC)))
 1d4:	5f 9b       	sbis	0x0b, 7	; 11
 1d6:	fe cf       	rjmp	.-4      	; 0x1d4 <main+0x150>
	}

	//Now USART has got data from host
	//and is available is buffer

	return UDR;
 1d8:	8c b1       	in	r24, 0x0c	; 12

	sco=USARTReadChar();
	
	 if(sco=='s')
	 		
		score=USARTReadNo();
 1da:	80 93 f4 00 	sts	0x00F4, r24
 1de:	28 c0       	rjmp	.+80     	; 0x230 <main+0x1ac>
			
	 if(sco=='l')
 1e0:	9c 36       	cpi	r25, 0x6C	; 108
 1e2:	31 f4       	brne	.+12     	; 0x1f0 <main+0x16c>
	UDR=data;
}
uint8_t USARTReadNo()
{
	//Wait untill a data is available
	while(!(UCSRA & (1<<RXC)))
 1e4:	5f 9b       	sbis	0x0b, 7	; 11
 1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <main+0x160>
	}

	//Now USART has got data from host
	//and is available is buffer

	return UDR;
 1e8:	8c b1       	in	r24, 0x0c	; 12
	 if(sco=='s')
	 		
		score=USARTReadNo();
			
	 if(sco=='l')
		level=USARTReadNo();
 1ea:	80 93 f5 00 	sts	0x00F5, r24
 1ee:	3d c0       	rjmp	.+122    	; 0x26a <main+0x1e6>
	if(sco=='g')
 1f0:	97 36       	cpi	r25, 0x67	; 103
 1f2:	31 f4       	brne	.+12     	; 0x200 <main+0x17c>
	UDR=data;
}
uint8_t USARTReadNo()
{
	//Wait untill a data is available
	while(!(UCSRA & (1<<RXC)))
 1f4:	5f 9b       	sbis	0x0b, 7	; 11
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <main+0x170>
	}

	//Now USART has got data from host
	//and is available is buffer

	return UDR;
 1f8:	8c b1       	in	r24, 0x0c	; 12
		score=USARTReadNo();
			
	 if(sco=='l')
		level=USARTReadNo();
	if(sco=='g')
		pong=USARTReadNo();
 1fa:	80 93 dd 00 	sts	0x00DD, r24
 1fe:	35 c0       	rjmp	.+106    	; 0x26a <main+0x1e6>

	if(sco=='w')
 200:	97 37       	cpi	r25, 0x77	; 119
 202:	b1 f4       	brne	.+44     	; 0x230 <main+0x1ac>
	UDR=data;
}
uint8_t USARTReadNo()
{
	//Wait untill a data is available
	while(!(UCSRA & (1<<RXC)))
 204:	5f 9b       	sbis	0x0b, 7	; 11
 206:	fe cf       	rjmp	.-4      	; 0x204 <main+0x180>
	}

	//Now USART has got data from host
	//and is available is buffer

	return UDR;
 208:	8c b1       	in	r24, 0x0c	; 12
		pong=USARTReadNo();

	if(sco=='w')
		{

		end=USARTReadNo();
 20a:	80 93 f6 00 	sts	0x00F6, r24
		if(end==3)
 20e:	83 30       	cpi	r24, 0x03	; 3
 210:	61 f5       	brne	.+88     	; 0x26a <main+0x1e6>
			{
		LCDClear();
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	81 d0       	rcall	.+258    	; 0x31a <LCDByte>
		LCDWriteStringXY(0,0,"***YOU  WIN***");
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	35 d1       	rcall	.+618    	; 0x488 <LCDGotoXY>
 21e:	86 e9       	ldi	r24, 0x96	; 150
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	ca d0       	rcall	.+404    	; 0x3b8 <LCDWriteString>
		LCDWriteStringXY(0,1,"Congrats.. :-)");
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	2f d1       	rcall	.+606    	; 0x488 <LCDGotoXY>
 22a:	85 ea       	ldi	r24, 0xA5	; 165
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	17 c0       	rjmp	.+46     	; 0x25e <main+0x1da>
		break;
			}
		}
if(sco=='o')
 230:	9f 36       	cpi	r25, 0x6F	; 111
 232:	d9 f4       	brne	.+54     	; 0x26a <main+0x1e6>
	UDR=data;
}
uint8_t USARTReadNo()
{
	//Wait untill a data is available
	while(!(UCSRA & (1<<RXC)))
 234:	5f 9b       	sbis	0x0b, 7	; 11
 236:	fe cf       	rjmp	.-4      	; 0x234 <main+0x1b0>
	}

	//Now USART has got data from host
	//and is available is buffer

	return UDR;
 238:	8c b1       	in	r24, 0x0c	; 12
			}
		}
if(sco=='o')
		{

		end=USARTReadNo();
 23a:	80 93 f6 00 	sts	0x00F6, r24
		if(end==4)
 23e:	84 30       	cpi	r24, 0x04	; 4
 240:	a1 f4       	brne	.+40     	; 0x26a <main+0x1e6>
			{
		LCDClear();
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	69 d0       	rcall	.+210    	; 0x31a <LCDByte>
		LCDWriteStringXY(4,0,"YOU  LOSE");
 248:	84 e0       	ldi	r24, 0x04	; 4
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	1d d1       	rcall	.+570    	; 0x488 <LCDGotoXY>
 24e:	84 eb       	ldi	r24, 0xB4	; 180
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	b2 d0       	rcall	.+356    	; 0x3b8 <LCDWriteString>
		LCDWriteStringXY(2,1,"FOOL.. :-(");
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	17 d1       	rcall	.+558    	; 0x488 <LCDGotoXY>
 25a:	8e eb       	ldi	r24, 0xBE	; 190
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	ac d0       	rcall	.+344    	; 0x3b8 <LCDWriteString>
		LCDClear();
		LCDWriteStringXY(0,0,"***YOU  WIN***");
		LCDWriteStringXY(0,1,"Congrats.. :-)");
	}*/
	}
}
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret
		LCDWriteStringXY(4,1,"Win");
		LCDWriteIntXY(7,1,level,1);
		_delay_ms(1000);
		LCDClear();
		}*/
	LCDClear();
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	55 d0       	rcall	.+170    	; 0x31a <LCDByte>
	LCDWriteString("SCORE:");
 270:	89 ec       	ldi	r24, 0xC9	; 201
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	a1 d0       	rcall	.+322    	; 0x3b8 <LCDWriteString>
	LCDWriteStringXY(4,1,"LEVEL:");
 276:	84 e0       	ldi	r24, 0x04	; 4
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	06 d1       	rcall	.+524    	; 0x488 <LCDGotoXY>
 27c:	80 ed       	ldi	r24, 0xD0	; 208
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	9b d0       	rcall	.+310    	; 0x3b8 <LCDWriteString>
	LCDWriteStringXY(9,0,"PONG:");
 282:	89 e0       	ldi	r24, 0x09	; 9
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	00 d1       	rcall	.+512    	; 0x488 <LCDGotoXY>
 288:	87 ed       	ldi	r24, 0xD7	; 215
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	95 d0       	rcall	.+298    	; 0x3b8 <LCDWriteString>
	LCDWriteIntXY(6,0,score,1);
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	fa d0       	rcall	.+500    	; 0x488 <LCDGotoXY>
 294:	80 91 f4 00 	lds	r24, 0x00F4
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	99 d0       	rcall	.+306    	; 0x3d2 <LCDWriteInt>
	LCDWriteIntXY(10,1,level,1);
 2a0:	8a e0       	ldi	r24, 0x0A	; 10
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	f1 d0       	rcall	.+482    	; 0x488 <LCDGotoXY>
 2a6:	80 91 f5 00 	lds	r24, 0x00F5
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	90 d0       	rcall	.+288    	; 0x3d2 <LCDWriteInt>
	LCDWriteIntXY(15,0,pong,1);
 2b2:	8f e0       	ldi	r24, 0x0F	; 15
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	e8 d0       	rcall	.+464    	; 0x488 <LCDGotoXY>
 2b8:	80 91 dd 00 	lds	r24, 0x00DD
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	87 d0       	rcall	.+270    	; 0x3d2 <LCDWriteInt>
 2c4:	80 cf       	rjmp	.-256    	; 0x1c6 <main+0x142>

000002c6 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 2c6:	84 b3       	in	r24, 0x14	; 20
 2c8:	80 7f       	andi	r24, 0xF0	; 240
 2ca:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 2cc:	96 9a       	sbi	0x12, 6	; 18
	CLEAR_RS();		//Read status
 2ce:	95 98       	cbi	0x12, 5	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	8a 95       	dec	r24
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	97 9a       	sbi	0x12, 7	; 18
 2da:	82 2f       	mov	r24, r18
 2dc:	8a 95       	dec	r24
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 2e0:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 2e2:	82 95       	swap	r24
 2e4:	80 7f       	andi	r24, 0xF0	; 240
 2e6:	92 2f       	mov	r25, r18
 2e8:	9a 95       	dec	r25
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 2ec:	97 98       	cbi	0x12, 7	; 18
 2ee:	92 2f       	mov	r25, r18
 2f0:	9a 95       	dec	r25
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 2f4:	97 9a       	sbi	0x12, 7	; 18
 2f6:	92 2f       	mov	r25, r18
 2f8:	9a 95       	dec	r25
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 2fc:	93 b3       	in	r25, 0x13	; 19
 2fe:	92 2f       	mov	r25, r18
 300:	9a 95       	dec	r25
 302:	f1 f7       	brne	.-4      	; 0x300 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 304:	97 98       	cbi	0x12, 7	; 18
 306:	92 2f       	mov	r25, r18
 308:	9a 95       	dec	r25
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 30c:	87 fd       	sbrc	r24, 7
 30e:	e4 cf       	rjmp	.-56     	; 0x2d8 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 310:	96 98       	cbi	0x12, 6	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 312:	84 b3       	in	r24, 0x14	; 20
 314:	8f 60       	ori	r24, 0x0F	; 15
 316:	84 bb       	out	0x14, r24	; 20

}
 318:	08 95       	ret

0000031a <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 31a:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 31c:	66 23       	and	r22, r22
 31e:	11 f4       	brne	.+4      	; 0x324 <LCDByte+0xa>
	CLEAR_RS();
 320:	95 98       	cbi	0x12, 5	; 18
 322:	01 c0       	rjmp	.+2      	; 0x326 <LCDByte+0xc>
else
	SET_RS();
 324:	95 9a       	sbi	0x12, 5	; 18
 326:	21 e0       	ldi	r18, 0x01	; 1
 328:	82 2f       	mov	r24, r18
 32a:	8a 95       	dec	r24
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 32e:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 330:	85 b3       	in	r24, 0x15	; 21
 332:	93 2f       	mov	r25, r19
 334:	92 95       	swap	r25
 336:	9f 70       	andi	r25, 0x0F	; 15
 338:	80 7f       	andi	r24, 0xF0	; 240
 33a:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 33c:	95 bb       	out	0x15, r25	; 21
 33e:	82 2f       	mov	r24, r18
 340:	8a 95       	dec	r24
 342:	f1 f7       	brne	.-4      	; 0x340 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 344:	97 98       	cbi	0x12, 7	; 18
 346:	82 2f       	mov	r24, r18
 348:	8a 95       	dec	r24
 34a:	f1 f7       	brne	.-4      	; 0x348 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 34c:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 34e:	85 b3       	in	r24, 0x15	; 21
 350:	3f 70       	andi	r19, 0x0F	; 15
 352:	80 7f       	andi	r24, 0xF0	; 240
 354:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 356:	85 bb       	out	0x15, r24	; 21
 358:	82 2f       	mov	r24, r18
 35a:	8a 95       	dec	r24
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 35e:	97 98       	cbi	0x12, 7	; 18
 360:	2a 95       	dec	r18
 362:	f1 f7       	brne	.-4      	; 0x360 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 364:	b0 df       	rcall	.-160    	; 0x2c6 <LCDBusyLoop>
}
 366:	08 95       	ret

00000368 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 368:	1f 93       	push	r17
 36a:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 36c:	8c e4       	ldi	r24, 0x4C	; 76
 36e:	9d e1       	ldi	r25, 0x1D	; 29
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 374:	84 b3       	in	r24, 0x14	; 20
 376:	8f 60       	ori	r24, 0x0F	; 15
 378:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 37a:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 37c:	8d 9a       	sbi	0x11, 5	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 37e:	8e 9a       	sbi	0x11, 6	; 17

	LCD_DATA_PORT&=0XF0;
 380:	85 b3       	in	r24, 0x15	; 21
 382:	80 7f       	andi	r24, 0xF0	; 240
 384:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 386:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 388:	96 98       	cbi	0x12, 6	; 18
	CLEAR_RS();
 38a:	95 98       	cbi	0x12, 5	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	98 2f       	mov	r25, r24
 390:	9a 95       	dec	r25
 392:	f1 f7       	brne	.-4      	; 0x390 <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 394:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 396:	a9 9a       	sbi	0x15, 1	; 21
 398:	98 2f       	mov	r25, r24
 39a:	9a 95       	dec	r25
 39c:	f1 f7       	brne	.-4      	; 0x39a <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 39e:	97 98       	cbi	0x12, 7	; 18
 3a0:	8a 95       	dec	r24
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 3a4:	90 df       	rcall	.-224    	; 0x2c6 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 3a6:	81 2f       	mov	r24, r17
 3a8:	8c 60       	ori	r24, 0x0C	; 12
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	b6 df       	rcall	.-148    	; 0x31a <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 3ae:	88 e2       	ldi	r24, 0x28	; 40
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	b3 df       	rcall	.-154    	; 0x31a <LCDByte>
}
 3b4:	1f 91       	pop	r17
 3b6:	08 95       	ret

000003b8 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	ec 01       	movw	r28, r24
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <LCDWriteString+0xe>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	ab df       	rcall	.-170    	; 0x31a <LCDByte>
	msg++;
 3c4:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 3c6:	88 81       	ld	r24, Y
 3c8:	88 23       	and	r24, r24
 3ca:	d1 f7       	brne	.-12     	; 0x3c0 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 3d2:	ef 92       	push	r14
 3d4:	ff 92       	push	r15
 3d6:	0f 93       	push	r16
 3d8:	1f 93       	push	r17
 3da:	df 93       	push	r29
 3dc:	cf 93       	push	r28
 3de:	00 d0       	rcall	.+0      	; 0x3e0 <LCDWriteInt+0xe>
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <LCDWriteInt+0x10>
 3e2:	0f 92       	push	r0
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	9c 01       	movw	r18, r24
 3ea:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 3ec:	fe 01       	movw	r30, r28
 3ee:	31 96       	adiw	r30, 0x01	; 1
 3f0:	85 e0       	ldi	r24, 0x05	; 5
 3f2:	df 01       	movw	r26, r30
 3f4:	1d 92       	st	X+, r1
 3f6:	8a 95       	dec	r24
 3f8:	e9 f7       	brne	.-6      	; 0x3f4 <LCDWriteInt+0x22>
 3fa:	fe 01       	movw	r30, r28
 3fc:	35 96       	adiw	r30, 0x05	; 5
 3fe:	0b c0       	rjmp	.+22     	; 0x416 <LCDWriteInt+0x44>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 400:	c9 01       	movw	r24, r18
 402:	6a e0       	ldi	r22, 0x0A	; 10
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	54 d0       	rcall	.+168    	; 0x4b0 <__divmodhi4>
 408:	80 83       	st	Z, r24
	val=val/10;
 40a:	c9 01       	movw	r24, r18
 40c:	6a e0       	ldi	r22, 0x0A	; 10
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	4f d0       	rcall	.+158    	; 0x4b0 <__divmodhi4>
 412:	9b 01       	movw	r18, r22
 414:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 416:	21 15       	cp	r18, r1
 418:	31 05       	cpc	r19, r1
 41a:	91 f7       	brne	.-28     	; 0x400 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 41c:	bf ef       	ldi	r27, 0xFF	; 255
 41e:	0f 3f       	cpi	r16, 0xFF	; 255
 420:	1b 07       	cpc	r17, r27
 422:	79 f4       	brne	.+30     	; 0x442 <LCDWriteInt+0x70>
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 428:	ae 01       	movw	r20, r28
 42a:	4f 5f       	subi	r20, 0xFF	; 255
 42c:	5f 4f       	sbci	r21, 0xFF	; 255
 42e:	02 c0       	rjmp	.+4      	; 0x434 <LCDWriteInt+0x62>
 430:	2f 5f       	subi	r18, 0xFF	; 255
 432:	3f 4f       	sbci	r19, 0xFF	; 255
 434:	fa 01       	movw	r30, r20
 436:	e2 0f       	add	r30, r18
 438:	f3 1f       	adc	r31, r19
 43a:	80 81       	ld	r24, Z
 43c:	88 23       	and	r24, r24
 43e:	c1 f3       	breq	.-16     	; 0x430 <LCDWriteInt+0x5e>
 440:	04 c0       	rjmp	.+8      	; 0x44a <LCDWriteInt+0x78>
	else
		j=5-field_length;
 442:	25 e0       	ldi	r18, 0x05	; 5
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	20 1b       	sub	r18, r16
 448:	31 0b       	sbc	r19, r17
 44a:	7e 01       	movw	r14, r28
 44c:	08 94       	sec
 44e:	e1 1c       	adc	r14, r1
 450:	f1 1c       	adc	r15, r1
 452:	e2 0e       	add	r14, r18
 454:	f3 1e       	adc	r15, r19
 456:	89 01       	movw	r16, r18
 458:	08 c0       	rjmp	.+16     	; 0x46a <__stack+0xb>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 45a:	f7 01       	movw	r30, r14
 45c:	81 91       	ld	r24, Z+
 45e:	7f 01       	movw	r14, r30
 460:	80 5d       	subi	r24, 0xD0	; 208
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	5a df       	rcall	.-332    	; 0x31a <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 466:	0f 5f       	subi	r16, 0xFF	; 255
 468:	1f 4f       	sbci	r17, 0xFF	; 255
 46a:	05 30       	cpi	r16, 0x05	; 5
 46c:	11 05       	cpc	r17, r1
 46e:	ac f3       	brlt	.-22     	; 0x45a <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	cf 91       	pop	r28
 47c:	df 91       	pop	r29
 47e:	1f 91       	pop	r17
 480:	0f 91       	pop	r16
 482:	ff 90       	pop	r15
 484:	ef 90       	pop	r14
 486:	08 95       	ret

00000488 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 488:	88 32       	cpi	r24, 0x28	; 40
 48a:	28 f4       	brcc	.+10     	; 0x496 <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 48c:	61 11       	cpse	r22, r1
 48e:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 490:	80 68       	ori	r24, 0x80	; 128
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	42 df       	rcall	.-380    	; 0x31a <LCDByte>
 496:	08 95       	ret

00000498 <__udivmodqi4>:
 498:	99 1b       	sub	r25, r25
 49a:	79 e0       	ldi	r23, 0x09	; 9
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <__udivmodqi4_ep>

0000049e <__udivmodqi4_loop>:
 49e:	99 1f       	adc	r25, r25
 4a0:	96 17       	cp	r25, r22
 4a2:	08 f0       	brcs	.+2      	; 0x4a6 <__udivmodqi4_ep>
 4a4:	96 1b       	sub	r25, r22

000004a6 <__udivmodqi4_ep>:
 4a6:	88 1f       	adc	r24, r24
 4a8:	7a 95       	dec	r23
 4aa:	c9 f7       	brne	.-14     	; 0x49e <__udivmodqi4_loop>
 4ac:	80 95       	com	r24
 4ae:	08 95       	ret

000004b0 <__divmodhi4>:
 4b0:	97 fb       	bst	r25, 7
 4b2:	09 2e       	mov	r0, r25
 4b4:	07 26       	eor	r0, r23
 4b6:	0a d0       	rcall	.+20     	; 0x4cc <__divmodhi4_neg1>
 4b8:	77 fd       	sbrc	r23, 7
 4ba:	04 d0       	rcall	.+8      	; 0x4c4 <__divmodhi4_neg2>
 4bc:	0c d0       	rcall	.+24     	; 0x4d6 <__udivmodhi4>
 4be:	06 d0       	rcall	.+12     	; 0x4cc <__divmodhi4_neg1>
 4c0:	00 20       	and	r0, r0
 4c2:	1a f4       	brpl	.+6      	; 0x4ca <__divmodhi4_exit>

000004c4 <__divmodhi4_neg2>:
 4c4:	70 95       	com	r23
 4c6:	61 95       	neg	r22
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255

000004ca <__divmodhi4_exit>:
 4ca:	08 95       	ret

000004cc <__divmodhi4_neg1>:
 4cc:	f6 f7       	brtc	.-4      	; 0x4ca <__divmodhi4_exit>
 4ce:	90 95       	com	r25
 4d0:	81 95       	neg	r24
 4d2:	9f 4f       	sbci	r25, 0xFF	; 255
 4d4:	08 95       	ret

000004d6 <__udivmodhi4>:
 4d6:	aa 1b       	sub	r26, r26
 4d8:	bb 1b       	sub	r27, r27
 4da:	51 e1       	ldi	r21, 0x11	; 17
 4dc:	07 c0       	rjmp	.+14     	; 0x4ec <__udivmodhi4_ep>

000004de <__udivmodhi4_loop>:
 4de:	aa 1f       	adc	r26, r26
 4e0:	bb 1f       	adc	r27, r27
 4e2:	a6 17       	cp	r26, r22
 4e4:	b7 07       	cpc	r27, r23
 4e6:	10 f0       	brcs	.+4      	; 0x4ec <__udivmodhi4_ep>
 4e8:	a6 1b       	sub	r26, r22
 4ea:	b7 0b       	sbc	r27, r23

000004ec <__udivmodhi4_ep>:
 4ec:	88 1f       	adc	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	5a 95       	dec	r21
 4f2:	a9 f7       	brne	.-22     	; 0x4de <__udivmodhi4_loop>
 4f4:	80 95       	com	r24
 4f6:	90 95       	com	r25
 4f8:	bc 01       	movw	r22, r24
 4fa:	cd 01       	movw	r24, r26
 4fc:	08 95       	ret

000004fe <_exit>:
 4fe:	f8 94       	cli

00000500 <__stop_program>:
 500:	ff cf       	rjmp	.-2      	; 0x500 <__stop_program>
