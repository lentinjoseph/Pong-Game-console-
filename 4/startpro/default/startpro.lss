
startpro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000003d2  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000040  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000462  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001cc  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000489  00000000  00000000  00000b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000db  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002f2  00000000  00000000  000010bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  000013b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ed       	ldi	r30, 0xD2	; 210
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a6 3a       	cpi	r26, 0xA6	; 166
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	40 d0       	rcall	.+128    	; 0xca <main>
  4a:	c1 c1       	rjmp	.+898    	; 0x3ce <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <ledon>:
volatile uint8_t led1[6]={224,112,56,28,14,7};
//led pixel activator//
void ledon(uint8_t i,uint8_t j)
{
	
	PORTC=led[i][j];
  4e:	e8 2f       	mov	r30, r24
  50:	f0 e0       	ldi	r31, 0x00	; 0
  52:	83 e0       	ldi	r24, 0x03	; 3
  54:	ee 0f       	add	r30, r30
  56:	ff 1f       	adc	r31, r31
  58:	8a 95       	dec	r24
  5a:	e1 f7       	brne	.-8      	; 0x54 <ledon+0x6>
  5c:	e6 0f       	add	r30, r22
  5e:	f1 1d       	adc	r31, r1
  60:	e0 5a       	subi	r30, 0xA0	; 160
  62:	ff 4f       	sbci	r31, 0xFF	; 255
  64:	80 81       	ld	r24, Z
  66:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  68:	88 ea       	ldi	r24, 0xA8	; 168
  6a:	91 e6       	ldi	r25, 0x61	; 97
  6c:	01 97       	sbiw	r24, 0x01	; 1
  6e:	f1 f7       	brne	.-4      	; 0x6c <ledon+0x1e>
	_delay_ms(100);		//time of led activate on pong board
	
}
  70:	08 95       	ret

00000072 <reset>:
//when reset done clear screen//
void reset(uint8_t i,uint8_t j)
{
	DDRD=0Xff;			//for buzzer//
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	81 bb       	out	0x11, r24	; 17
	PORTD=0X00;
  76:	12 ba       	out	0x12, r1	; 18
  78:	e8 ea       	ldi	r30, 0xA8	; 168
  7a:	f1 e6       	ldi	r31, 0x61	; 97
  7c:	31 97       	sbiw	r30, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <reset+0xa>
	_delay_ms(100);
	PORTD=0XFF;
  80:	82 bb       	out	0x12, r24	; 18
	DDRD=0X00;
  82:	11 ba       	out	0x11, r1	; 17
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	50 e0       	ldi	r21, 0x00	; 0
  88:	a2 ee       	ldi	r26, 0xE2	; 226
  8a:	b4 e0       	ldi	r27, 0x04	; 4
  8c:	14 c0       	rjmp	.+40     	; 0xb6 <reset+0x44>
	
	for(i=0;i<8;i++){		//for clearing screen//
		for(j=0;j<8;j++){
	PORTC=led[i][j];
  8e:	fb 01       	movw	r30, r22
  90:	e2 0f       	add	r30, r18
  92:	f3 1f       	adc	r31, r19
  94:	e0 5a       	subi	r30, 0xA0	; 160
  96:	ff 4f       	sbci	r31, 0xFF	; 255
  98:	80 81       	ld	r24, Z
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	cd 01       	movw	r24, r26
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <reset+0x2c>
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	3f 4f       	sbci	r19, 0xFF	; 255
	_delay_ms(100);
	PORTD=0XFF;
	DDRD=0X00;
	
	for(i=0;i<8;i++){		//for clearing screen//
		for(j=0;j<8;j++){
  a6:	28 30       	cpi	r18, 0x08	; 8
  a8:	31 05       	cpc	r19, r1
  aa:	89 f7       	brne	.-30     	; 0x8e <reset+0x1c>
  ac:	4f 5f       	subi	r20, 0xFF	; 255
  ae:	5f 4f       	sbci	r21, 0xFF	; 255
	PORTD=0X00;
	_delay_ms(100);
	PORTD=0XFF;
	DDRD=0X00;
	
	for(i=0;i<8;i++){		//for clearing screen//
  b0:	48 30       	cpi	r20, 0x08	; 8
  b2:	51 05       	cpc	r21, r1
  b4:	49 f0       	breq	.+18     	; 0xc8 <reset+0x56>
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
		for(j=0;j<8;j++){
	PORTC=led[i][j];
  ba:	ba 01       	movw	r22, r20
  bc:	93 e0       	ldi	r25, 0x03	; 3
  be:	66 0f       	add	r22, r22
  c0:	77 1f       	adc	r23, r23
  c2:	9a 95       	dec	r25
  c4:	e1 f7       	brne	.-8      	; 0xbe <reset+0x4c>
  c6:	e3 cf       	rjmp	.-58     	; 0x8e <reset+0x1c>
  c8:	08 95       	ret

000000ca <main>:
	}

	
}
int main()				
{
  ca:	af 92       	push	r10
  cc:	bf 92       	push	r11
  ce:	cf 92       	push	r12
  d0:	df 92       	push	r13
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	0f 92       	push	r0
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
uint8_t portb;

//for acessing led matrix//
uint8_t i=1,j=-1;

DDRC =0xff; 	//for led matrix input//
  e4:	ff 24       	eor	r15, r15
  e6:	fa 94       	dec	r15
DDRB=0Xff;		//for pad//
volatile uint8_t m=2;	
  e8:	42 e0       	ldi	r20, 0x02	; 2
  ea:	e4 2e       	mov	r14, r20
  ec:	08 ea       	ldi	r16, 0xA8	; 168
  ee:	11 e6       	ldi	r17, 0x61	; 97

m--;
PORTB=led1[m];

if(m<=0)
m=1;
  f0:	3a ef       	ldi	r19, 0xFA	; 250
  f2:	c3 2e       	mov	r12, r19
  f4:	d1 2c       	mov	r13, r1
  f6:	bb 24       	eor	r11, r11
  f8:	b3 94       	inc	r11
{

m++;
PORTB=led1[m];
if(m>=5)
m=4;
  fa:	24 e0       	ldi	r18, 0x04	; 4
  fc:	a2 2e       	mov	r10, r18
uint8_t portb;

//for acessing led matrix//
uint8_t i=1,j=-1;

DDRC =0xff; 	//for led matrix input//
  fe:	f4 ba       	out	0x14, r15	; 20
DDRB=0Xff;		//for pad//
 100:	f7 ba       	out	0x17, r15	; 23
volatile uint8_t m=2;	
 102:	e9 82       	std	Y+1, r14	; 0x01
DDRD=0x00; 			//for input key//
 104:	11 ba       	out	0x11, r1	; 17
PORTB=0XFF;
 106:	f8 ba       	out	0x18, r15	; 24
 108:	c8 01       	movw	r24, r16
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x40>
_delay_ms(100);
PORTB=led1[2]; //initial pad position//
 10e:	80 91 a2 00 	lds	r24, 0x00A2
 112:	88 bb       	out	0x18, r24	; 24

PORTD=0xFF;  // Internal pullup is enable 
 114:	f2 ba       	out	0x12, r15	; 18
volatile uint8_t led1[6]={224,112,56,28,14,7};
//led pixel activator//
void ledon(uint8_t i,uint8_t j)
{
	
	PORTC=led[i][j];
 116:	80 91 87 00 	lds	r24, 0x0087
 11a:	85 bb       	out	0x15, r24	; 21
 11c:	c8 01       	movw	r24, r16
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x54>
 122:	c8 01       	movw	r24, r16
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x5a>
 128:	57 e0       	ldi	r21, 0x07	; 7
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	6f ef       	ldi	r22, 0xFF	; 255
 12e:	74 e0       	ldi	r23, 0x04	; 4
 130:	e7 2f       	mov	r30, r23
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	93 e0       	ldi	r25, 0x03	; 3
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	9a 95       	dec	r25
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x6c>
 13e:	e5 0f       	add	r30, r21
 140:	f1 1d       	adc	r31, r1
 142:	e0 5a       	subi	r30, 0xA0	; 160
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	80 81       	ld	r24, Z
 148:	85 bb       	out	0x15, r24	; 21
 14a:	c8 01       	movw	r24, r16
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x82>
  
//acessing each led
ledon(row,col); 

//row and colomn algorithm
row=row+i;
 150:	74 0f       	add	r23, r20
col=col+j;
 152:	56 0f       	add	r21, r22
volatile uint8_t led1[6]={224,112,56,28,14,7};
//led pixel activator//
void ledon(uint8_t i,uint8_t j)
{
	
	PORTC=led[i][j];
 154:	a7 2f       	mov	r26, r23
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	25 2f       	mov	r18, r21
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	fd 01       	movw	r30, r26
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	8a 95       	dec	r24
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x96>
 168:	e2 0f       	add	r30, r18
 16a:	f3 1f       	adc	r31, r19
 16c:	e0 5a       	subi	r30, 0xA0	; 160
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	80 81       	ld	r24, Z
 172:	85 bb       	out	0x15, r24	; 21
 174:	c8 01       	movw	r24, r16
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0xac>
row=row+i;
col=col+j;
ledon(row,col);


if(row==7)              //last row condition
 17a:	77 30       	cpi	r23, 0x07	; 7
 17c:	09 f0       	breq	.+2      	; 0x180 <main+0xb6>
 17e:	8f c0       	rjmp	.+286    	; 0x29e <main+0x1d4>
	{
	
	if(led[row][col]==56)
 180:	80 81       	ld	r24, Z
 182:	88 33       	cpi	r24, 0x38	; 56
 184:	21 f4       	brne	.+8      	; 0x18e <main+0xc4>
	{
		portb=PORTB;
 186:	88 b3       	in	r24, 0x18	; 24
			if((portb==224))
 188:	80 3e       	cpi	r24, 0xE0	; 224
 18a:	09 f0       	breq	.+2      	; 0x18e <main+0xc4>
 18c:	e9 c0       	rjmp	.+466    	; 0x360 <main+0x296>
				
							
				break;
			}
			}
	if(led[row][col]==57)
 18e:	fd 01       	movw	r30, r26
 190:	93 e0       	ldi	r25, 0x03	; 3
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	9a 95       	dec	r25
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0xc8>
 19a:	e2 0f       	add	r30, r18
 19c:	f3 1f       	adc	r31, r19
 19e:	e0 5a       	subi	r30, 0xA0	; 160
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	80 81       	ld	r24, Z
 1a4:	89 33       	cpi	r24, 0x39	; 57
 1a6:	31 f4       	brne	.+12     	; 0x1b4 <main+0xea>
		{
		portb=PORTB;
 1a8:	88 b3       	in	r24, 0x18	; 24
			if((portb==224) || (portb==112))
 1aa:	80 3e       	cpi	r24, 0xE0	; 224
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <main+0xea>
 1ae:	80 37       	cpi	r24, 0x70	; 112
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <main+0xea>
 1b2:	d6 c0       	rjmp	.+428    	; 0x360 <main+0x296>
							
				break;
			}
			}	
//i=-1;
	if(led[row][col]==58)
 1b4:	fd 01       	movw	r30, r26
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	ee 0f       	add	r30, r30
 1ba:	ff 1f       	adc	r31, r31
 1bc:	8a 95       	dec	r24
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0xee>
 1c0:	e2 0f       	add	r30, r18
 1c2:	f3 1f       	adc	r31, r19
 1c4:	e0 5a       	subi	r30, 0xA0	; 160
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	80 81       	ld	r24, Z
 1ca:	8a 33       	cpi	r24, 0x3A	; 58
 1cc:	41 f4       	brne	.+16     	; 0x1de <main+0x114>
		{
		portb=PORTB;
 1ce:	88 b3       	in	r24, 0x18	; 24
			if((portb==224) || (portb==112) || (portb==56))
 1d0:	80 3e       	cpi	r24, 0xE0	; 224
 1d2:	29 f0       	breq	.+10     	; 0x1de <main+0x114>
 1d4:	80 37       	cpi	r24, 0x70	; 112
 1d6:	19 f0       	breq	.+6      	; 0x1de <main+0x114>
 1d8:	88 33       	cpi	r24, 0x38	; 56
 1da:	09 f0       	breq	.+2      	; 0x1de <main+0x114>
 1dc:	c1 c0       	rjmp	.+386    	; 0x360 <main+0x296>
					reset(i,j);
				
							
				break;
			}	}
if(led[row][col]==59)
 1de:	fd 01       	movw	r30, r26
 1e0:	93 e0       	ldi	r25, 0x03	; 3
 1e2:	ee 0f       	add	r30, r30
 1e4:	ff 1f       	adc	r31, r31
 1e6:	9a 95       	dec	r25
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x118>
 1ea:	e2 0f       	add	r30, r18
 1ec:	f3 1f       	adc	r31, r19
 1ee:	e0 5a       	subi	r30, 0xA0	; 160
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	80 81       	ld	r24, Z
 1f4:	8b 33       	cpi	r24, 0x3B	; 59
 1f6:	41 f4       	brne	.+16     	; 0x208 <main+0x13e>
		{
		portb=PORTB;
 1f8:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==112) || (portb==56))
 1fa:	8c 31       	cpi	r24, 0x1C	; 28
 1fc:	29 f0       	breq	.+10     	; 0x208 <main+0x13e>
 1fe:	80 37       	cpi	r24, 0x70	; 112
 200:	19 f0       	breq	.+6      	; 0x208 <main+0x13e>
 202:	88 33       	cpi	r24, 0x38	; 56
 204:	09 f0       	breq	.+2      	; 0x208 <main+0x13e>
 206:	ac c0       	rjmp	.+344    	; 0x360 <main+0x296>
				break;
			
			}	
}

if(led[row][col]==60)
 208:	fd 01       	movw	r30, r26
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	ee 0f       	add	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	8a 95       	dec	r24
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0x142>
 214:	e2 0f       	add	r30, r18
 216:	f3 1f       	adc	r31, r19
 218:	e0 5a       	subi	r30, 0xA0	; 160
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	80 81       	ld	r24, Z
 21e:	8c 33       	cpi	r24, 0x3C	; 60
 220:	41 f4       	brne	.+16     	; 0x232 <main+0x168>
		{
		portb=PORTB;
 222:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==14) || (portb==56))
 224:	8c 31       	cpi	r24, 0x1C	; 28
 226:	29 f0       	breq	.+10     	; 0x232 <main+0x168>
 228:	8e 30       	cpi	r24, 0x0E	; 14
 22a:	19 f0       	breq	.+6      	; 0x232 <main+0x168>
 22c:	88 33       	cpi	r24, 0x38	; 56
 22e:	09 f0       	breq	.+2      	; 0x232 <main+0x168>
 230:	97 c0       	rjmp	.+302    	; 0x360 <main+0x296>
				
							
				break;
			
			}}
if(led[row][col]==61)
 232:	fd 01       	movw	r30, r26
 234:	93 e0       	ldi	r25, 0x03	; 3
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	9a 95       	dec	r25
 23c:	e1 f7       	brne	.-8      	; 0x236 <main+0x16c>
 23e:	e2 0f       	add	r30, r18
 240:	f3 1f       	adc	r31, r19
 242:	e0 5a       	subi	r30, 0xA0	; 160
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	80 81       	ld	r24, Z
 248:	8d 33       	cpi	r24, 0x3D	; 61
 24a:	41 f4       	brne	.+16     	; 0x25c <main+0x192>
		{
		portb=PORTB;
 24c:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==14) || (portb==7))
 24e:	8c 31       	cpi	r24, 0x1C	; 28
 250:	29 f0       	breq	.+10     	; 0x25c <main+0x192>
 252:	8e 30       	cpi	r24, 0x0E	; 14
 254:	19 f0       	breq	.+6      	; 0x25c <main+0x192>
 256:	87 30       	cpi	r24, 0x07	; 7
 258:	09 f0       	breq	.+2      	; 0x25c <main+0x192>
 25a:	82 c0       	rjmp	.+260    	; 0x360 <main+0x296>
							
				break;
			
				}	
	}
if(led[row][col]==62)
 25c:	fd 01       	movw	r30, r26
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	ee 0f       	add	r30, r30
 262:	ff 1f       	adc	r31, r31
 264:	8a 95       	dec	r24
 266:	e1 f7       	brne	.-8      	; 0x260 <main+0x196>
 268:	e2 0f       	add	r30, r18
 26a:	f3 1f       	adc	r31, r19
 26c:	e0 5a       	subi	r30, 0xA0	; 160
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	80 81       	ld	r24, Z
 272:	8e 33       	cpi	r24, 0x3E	; 62
 274:	31 f4       	brne	.+12     	; 0x282 <main+0x1b8>
		{
		portb=PORTB;
 276:	88 b3       	in	r24, 0x18	; 24
			if((portb==14) || (portb==7))
 278:	8e 30       	cpi	r24, 0x0E	; 14
 27a:	19 f0       	breq	.+6      	; 0x282 <main+0x1b8>
 27c:	87 30       	cpi	r24, 0x07	; 7
 27e:	09 f0       	breq	.+2      	; 0x282 <main+0x1b8>
 280:	6f c0       	rjmp	.+222    	; 0x360 <main+0x296>
				
							
				break;
			
			}}	
if(led[row][col]==63)
 282:	e3 e0       	ldi	r30, 0x03	; 3
 284:	aa 0f       	add	r26, r26
 286:	bb 1f       	adc	r27, r27
 288:	ea 95       	dec	r30
 28a:	e1 f7       	brne	.-8      	; 0x284 <main+0x1ba>
 28c:	a2 0f       	add	r26, r18
 28e:	b3 1f       	adc	r27, r19
 290:	a0 5a       	subi	r26, 0xA0	; 160
 292:	bf 4f       	sbci	r27, 0xFF	; 255
 294:	8c 91       	ld	r24, X
 296:	8f 33       	cpi	r24, 0x3F	; 63
 298:	09 f0       	breq	.+2      	; 0x29c <main+0x1d2>
 29a:	65 c0       	rjmp	.+202    	; 0x366 <main+0x29c>
 29c:	5e c0       	rjmp	.+188    	; 0x35a <main+0x290>
	PORTD =0;*/



	}
if(row==0)				//1st row condition
 29e:	77 23       	and	r23, r23
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <main+0x1da>
 2a2:	62 c0       	rjmp	.+196    	; 0x368 <main+0x29e>
	{
	
	if(led[row][col]==0)
 2a4:	f9 01       	movw	r30, r18
 2a6:	e0 5a       	subi	r30, 0xA0	; 160
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	80 81       	ld	r24, Z
 2ac:	88 23       	and	r24, r24
 2ae:	21 f4       	brne	.+8      	; 0x2b8 <main+0x1ee>
	{
		portb=PORTB;
 2b0:	88 b3       	in	r24, 0x18	; 24
			if((portb==224))
 2b2:	80 3e       	cpi	r24, 0xE0	; 224
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <main+0x1ee>
 2b6:	54 c0       	rjmp	.+168    	; 0x360 <main+0x296>
				
							
				break;
			}
			}
	if(led[row][col]==1)
 2b8:	f9 01       	movw	r30, r18
 2ba:	e0 5a       	subi	r30, 0xA0	; 160
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	80 81       	ld	r24, Z
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	31 f4       	brne	.+12     	; 0x2d0 <main+0x206>
		{
		portb=PORTB;
 2c4:	88 b3       	in	r24, 0x18	; 24
			if((portb==224) || (portb==112))
 2c6:	80 3e       	cpi	r24, 0xE0	; 224
 2c8:	19 f0       	breq	.+6      	; 0x2d0 <main+0x206>
 2ca:	80 37       	cpi	r24, 0x70	; 112
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <main+0x206>
 2ce:	48 c0       	rjmp	.+144    	; 0x360 <main+0x296>
							
				break;
			}
			}	

	if(led[row][col]==2)
 2d0:	f9 01       	movw	r30, r18
 2d2:	e0 5a       	subi	r30, 0xA0	; 160
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	80 81       	ld	r24, Z
 2d8:	82 30       	cpi	r24, 0x02	; 2
 2da:	39 f4       	brne	.+14     	; 0x2ea <main+0x220>
		{
		portb=PORTB;
 2dc:	88 b3       	in	r24, 0x18	; 24
			if((portb==224) || (portb==112) || (portb==56))
 2de:	80 3e       	cpi	r24, 0xE0	; 224
 2e0:	21 f0       	breq	.+8      	; 0x2ea <main+0x220>
 2e2:	80 37       	cpi	r24, 0x70	; 112
 2e4:	11 f0       	breq	.+4      	; 0x2ea <main+0x220>
 2e6:	88 33       	cpi	r24, 0x38	; 56
 2e8:	d9 f5       	brne	.+118    	; 0x360 <main+0x296>
					reset(i,j);
				
							
				break;
			}	}
if(led[row][col]==3)
 2ea:	f9 01       	movw	r30, r18
 2ec:	e0 5a       	subi	r30, 0xA0	; 160
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	80 81       	ld	r24, Z
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	39 f4       	brne	.+14     	; 0x304 <main+0x23a>
		{
		portb=PORTB;
 2f6:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==112) || (portb==56))
 2f8:	8c 31       	cpi	r24, 0x1C	; 28
 2fa:	21 f0       	breq	.+8      	; 0x304 <main+0x23a>
 2fc:	80 37       	cpi	r24, 0x70	; 112
 2fe:	11 f0       	breq	.+4      	; 0x304 <main+0x23a>
 300:	88 33       	cpi	r24, 0x38	; 56
 302:	71 f5       	brne	.+92     	; 0x360 <main+0x296>
				break;
			
			}	
}

if(led[row][col]==4)
 304:	f9 01       	movw	r30, r18
 306:	e0 5a       	subi	r30, 0xA0	; 160
 308:	ff 4f       	sbci	r31, 0xFF	; 255
 30a:	80 81       	ld	r24, Z
 30c:	84 30       	cpi	r24, 0x04	; 4
 30e:	39 f4       	brne	.+14     	; 0x31e <main+0x254>
		{
		portb=PORTB;
 310:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==14) || (portb==56))
 312:	8c 31       	cpi	r24, 0x1C	; 28
 314:	21 f0       	breq	.+8      	; 0x31e <main+0x254>
 316:	8e 30       	cpi	r24, 0x0E	; 14
 318:	11 f0       	breq	.+4      	; 0x31e <main+0x254>
 31a:	88 33       	cpi	r24, 0x38	; 56
 31c:	09 f5       	brne	.+66     	; 0x360 <main+0x296>
				
							
				break;
			
			}}
if(led[row][col]==5)
 31e:	f9 01       	movw	r30, r18
 320:	e0 5a       	subi	r30, 0xA0	; 160
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	80 81       	ld	r24, Z
 326:	85 30       	cpi	r24, 0x05	; 5
 328:	39 f4       	brne	.+14     	; 0x338 <main+0x26e>
		{
		portb=PORTB;
 32a:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==14) || (portb==7))
 32c:	8c 31       	cpi	r24, 0x1C	; 28
 32e:	21 f0       	breq	.+8      	; 0x338 <main+0x26e>
 330:	8e 30       	cpi	r24, 0x0E	; 14
 332:	11 f0       	breq	.+4      	; 0x338 <main+0x26e>
 334:	87 30       	cpi	r24, 0x07	; 7
 336:	a1 f4       	brne	.+40     	; 0x360 <main+0x296>
							
				break;
			
				}	
	}
if(led[row][col]==6)
 338:	f9 01       	movw	r30, r18
 33a:	e0 5a       	subi	r30, 0xA0	; 160
 33c:	ff 4f       	sbci	r31, 0xFF	; 255
 33e:	80 81       	ld	r24, Z
 340:	86 30       	cpi	r24, 0x06	; 6
 342:	29 f4       	brne	.+10     	; 0x34e <main+0x284>
		{
		portb=PORTB;
 344:	88 b3       	in	r24, 0x18	; 24
			if((portb==14) || (portb==7))
 346:	8e 30       	cpi	r24, 0x0E	; 14
 348:	11 f0       	breq	.+4      	; 0x34e <main+0x284>
 34a:	87 30       	cpi	r24, 0x07	; 7
 34c:	49 f4       	brne	.+18     	; 0x360 <main+0x296>
				
							
				break;
			
			}}	
if(led[row][col]==7)
 34e:	20 5a       	subi	r18, 0xA0	; 160
 350:	3f 4f       	sbci	r19, 0xFF	; 255
 352:	f9 01       	movw	r30, r18
 354:	80 81       	ld	r24, Z
 356:	87 30       	cpi	r24, 0x07	; 7
 358:	31 f4       	brne	.+12     	; 0x366 <main+0x29c>
		{
		portb=PORTB;
 35a:	88 b3       	in	r24, 0x18	; 24
			if((portb==7))
 35c:	87 30       	cpi	r24, 0x07	; 7
 35e:	19 f0       	breq	.+6      	; 0x366 <main+0x29c>
				_delay_ms(10);
				PORTD =0;*/
			}	
			else{
		
					reset(i,j);
 360:	84 2f       	mov	r24, r20
 362:	87 de       	rcall	.-754    	; 0x72 <reset>
 364:	cc ce       	rjmp	.-616    	; 0xfe <main+0x34>



	
	row=0;
	i=-i;
 366:	41 95       	neg	r20
	/*PORTD =0XFF;
	_delay_ms(5);
	PORTD =0;*/
	}
if(col==0)			//left side column
 368:	55 23       	and	r21, r21
 36a:	19 f4       	brne	.+6      	; 0x372 <main+0x2a8>
	{
	col=1;
	j=-j;
 36c:	61 95       	neg	r22
 36e:	51 e0       	ldi	r21, 0x01	; 1
 370:	04 c0       	rjmp	.+8      	; 0x37a <main+0x2b0>
	/*PORTD =0XFF;
	_delay_ms(5);
	PORTD =0;*/	
	}
if(col==7)		//right side column
 372:	57 30       	cpi	r21, 0x07	; 7
 374:	11 f4       	brne	.+4      	; 0x37a <main+0x2b0>
	{
	col=6;
	j=-j;
 376:	61 95       	neg	r22
 378:	56 e0       	ldi	r21, 0x06	; 6
	/*PORTD =0XFF;
	_delay_ms(5);
	PORTD =0;*/	
	}
if(!(PIND & 0x01))  // check whether the switch is pressed or not
 37a:	80 99       	sbic	0x10, 0	; 16
 37c:	12 c0       	rjmp	.+36     	; 0x3a2 <main+0x2d8>
 37e:	c6 01       	movw	r24, r12
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <main+0x2b6>

{
_delay_ms(1);
//while(!(PIND & 0x01)); //wait for debounce

if(!(PIND & 0x01))
 384:	80 99       	sbic	0x10, 0	; 16
 386:	0d c0       	rjmp	.+26     	; 0x3a2 <main+0x2d8>
{

m++;
 388:	89 81       	ldd	r24, Y+1	; 0x01
 38a:	8f 5f       	subi	r24, 0xFF	; 255
 38c:	89 83       	std	Y+1, r24	; 0x01
PORTB=led1[m];
 38e:	e9 81       	ldd	r30, Y+1	; 0x01
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	e0 56       	subi	r30, 0x60	; 96
 394:	ff 4f       	sbci	r31, 0xFF	; 255
 396:	80 81       	ld	r24, Z
 398:	88 bb       	out	0x18, r24	; 24
if(m>=5)
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	85 30       	cpi	r24, 0x05	; 5
 39e:	08 f0       	brcs	.+2      	; 0x3a2 <main+0x2d8>
m=4;
 3a0:	a9 82       	std	Y+1, r10	; 0x01
//_delay_ms(1);   // On for a half second

} 
}
if(!(PIND & 0x02))  // check whether the switch is pressed or not
 3a2:	81 99       	sbic	0x10, 1	; 16
 3a4:	c5 ce       	rjmp	.-630    	; 0x130 <main+0x66>
 3a6:	c6 01       	movw	r24, r12
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <main+0x2de>

{
_delay_ms(1);
if(!(PIND & 0x02))
 3ac:	81 99       	sbic	0x10, 1	; 16
 3ae:	c0 ce       	rjmp	.-640    	; 0x130 <main+0x66>
{
//while(!(PIND & 0x02)); //wait for debounce


m--;
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	81 50       	subi	r24, 0x01	; 1
 3b4:	89 83       	std	Y+1, r24	; 0x01
PORTB=led1[m];
 3b6:	e9 81       	ldd	r30, Y+1	; 0x01
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	e0 56       	subi	r30, 0x60	; 96
 3bc:	ff 4f       	sbci	r31, 0xFF	; 255
 3be:	80 81       	ld	r24, Z
 3c0:	88 bb       	out	0x18, r24	; 24

if(m<=0)
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	88 23       	and	r24, r24
 3c6:	09 f0       	breq	.+2      	; 0x3ca <main+0x300>
 3c8:	b3 ce       	rjmp	.-666    	; 0x130 <main+0x66>
m=1;
 3ca:	b9 82       	std	Y+1, r11	; 0x01
 3cc:	b1 ce       	rjmp	.-670    	; 0x130 <main+0x66>

000003ce <_exit>:
 3ce:	f8 94       	cli

000003d0 <__stop_program>:
 3d0:	ff cf       	rjmp	.-2      	; 0x3d0 <__stop_program>
