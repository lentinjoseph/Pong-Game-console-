
8x8test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000000c0  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e4  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000146  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000164  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000cf  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000003b  00000000  00000000  00000753  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  0000078e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ec       	ldi	r30, 0xC0	; 192
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 3a       	cpi	r26, 0xA0	; 160
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	16 d0       	rcall	.+44     	; 0x76 <main>
  4a:	38 c0       	rjmp	.+112    	; 0xbc <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <ledon>:
						};

void ledon(uint8_t i,uint8_t j)
{
	//DDRC=63;
	DDRC=0XFF;
  4e:	9f ef       	ldi	r25, 0xFF	; 255
  50:	94 bb       	out	0x14, r25	; 20
	PORTC=ledmat[i][j];
  52:	e8 2f       	mov	r30, r24
  54:	f0 e0       	ldi	r31, 0x00	; 0
  56:	83 e0       	ldi	r24, 0x03	; 3
  58:	ee 0f       	add	r30, r30
  5a:	ff 1f       	adc	r31, r31
  5c:	8a 95       	dec	r24
  5e:	e1 f7       	brne	.-8      	; 0x58 <ledon+0xa>
  60:	e6 0f       	add	r30, r22
  62:	f1 1d       	adc	r31, r1
  64:	e0 5a       	subi	r30, 0xA0	; 160
  66:	ff 4f       	sbci	r31, 0xFF	; 255
  68:	80 81       	ld	r24, Z
  6a:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6c:	8c e5       	ldi	r24, 0x5C	; 92
  6e:	94 e4       	ldi	r25, 0x44	; 68
  70:	01 97       	sbiw	r24, 0x01	; 1
  72:	f1 f7       	brne	.-4      	; 0x70 <ledon+0x22>
	_delay_ms(70);
	
}
  74:	08 95       	ret

00000076 <main>:
int main()
{
  76:	60 e0       	ldi	r22, 0x00	; 0
  78:	ac e5       	ldi	r26, 0x5C	; 92
  7a:	b4 e4       	ldi	r27, 0x44	; 68
						};

void ledon(uint8_t i,uint8_t j)
{
	//DDRC=63;
	DDRC=0XFF;
  7c:	7f ef       	ldi	r23, 0xFF	; 255
  7e:	14 c0       	rjmp	.+40     	; 0xa8 <main+0x32>
  80:	74 bb       	out	0x14, r23	; 20
	PORTC=ledmat[i][j];
  82:	fa 01       	movw	r30, r20
  84:	e2 0f       	add	r30, r18
  86:	f3 1f       	adc	r31, r19
  88:	e0 5a       	subi	r30, 0xA0	; 160
  8a:	ff 4f       	sbci	r31, 0xFF	; 255
  8c:	80 81       	ld	r24, Z
  8e:	85 bb       	out	0x15, r24	; 21
  90:	cd 01       	movw	r24, r26
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <main+0x1c>
  96:	2f 5f       	subi	r18, 0xFF	; 255
  98:	3f 4f       	sbci	r19, 0xFF	; 255
{
	
	uint8_t k=0;uint8_t l=0;
	while(1){
	for(l=0;l<=8;l++)
		for(k=0;k<=8;k++)
  9a:	29 30       	cpi	r18, 0x09	; 9
  9c:	31 05       	cpc	r19, r1
  9e:	81 f7       	brne	.-32     	; 0x80 <main+0xa>
int main()
{
	
	uint8_t k=0;uint8_t l=0;
	while(1){
	for(l=0;l<=8;l++)
  a0:	6f 5f       	subi	r22, 0xFF	; 255
  a2:	69 30       	cpi	r22, 0x09	; 9
  a4:	08 f0       	brcs	.+2      	; 0xa8 <main+0x32>
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	30 e0       	ldi	r19, 0x00	; 0

void ledon(uint8_t i,uint8_t j)
{
	//DDRC=63;
	DDRC=0XFF;
	PORTC=ledmat[i][j];
  ac:	46 2f       	mov	r20, r22
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	93 e0       	ldi	r25, 0x03	; 3
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	9a 95       	dec	r25
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x3c>
  ba:	e2 cf       	rjmp	.-60     	; 0x80 <main+0xa>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
