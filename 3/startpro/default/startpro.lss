
startpro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000003dc  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000040  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000475  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001dc  00000000  00000000  0000096b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000494  00000000  00000000  00000b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000db  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002fa  00000000  00000000  000010f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ed       	ldi	r30, 0xDC	; 220
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a6 3a       	cpi	r26, 0xA6	; 166
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	46 d0       	rcall	.+140    	; 0xd6 <main>
  4a:	c6 c1       	rjmp	.+908    	; 0x3d8 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <ledon>:
				   				   };
volatile uint8_t led1[6]={224,112,56,28,14,7};
void ledon(uint8_t i,uint8_t j)
{
	
	PORTC=led[i][j];
  4e:	e8 2f       	mov	r30, r24
  50:	f0 e0       	ldi	r31, 0x00	; 0
  52:	83 e0       	ldi	r24, 0x03	; 3
  54:	ee 0f       	add	r30, r30
  56:	ff 1f       	adc	r31, r31
  58:	8a 95       	dec	r24
  5a:	e1 f7       	brne	.-8      	; 0x54 <ledon+0x6>
  5c:	e6 0f       	add	r30, r22
  5e:	f1 1d       	adc	r31, r1
  60:	e0 5a       	subi	r30, 0xA0	; 160
  62:	ff 4f       	sbci	r31, 0xFF	; 255
  64:	80 81       	ld	r24, Z
  66:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  68:	88 ea       	ldi	r24, 0xA8	; 168
  6a:	91 e6       	ldi	r25, 0x61	; 97
  6c:	01 97       	sbiw	r24, 0x01	; 1
  6e:	f1 f7       	brne	.-4      	; 0x6c <ledon+0x1e>
	_delay_ms(100);
	
}
  70:	08 95       	ret

00000072 <reset>:
void reset(uint8_t i,uint8_t j)
{
	DDRD=0Xff;
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	81 bb       	out	0x11, r24	; 17
	PORTD=0X00;
  76:	12 ba       	out	0x12, r1	; 18
  78:	80 e1       	ldi	r24, 0x10	; 16
  7a:	97 e2       	ldi	r25, 0x27	; 39
  7c:	29 e1       	ldi	r18, 0x19	; 25
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	f9 01       	movw	r30, r18
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <reset+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  86:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  88:	d9 f7       	brne	.-10     	; 0x80 <reset+0xe>
	_delay_ms(1000);
	PORTD=0XFF;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	82 bb       	out	0x12, r24	; 18
	DDRD=0X00;
  8e:	11 ba       	out	0x11, r1	; 17
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	50 e0       	ldi	r21, 0x00	; 0
  94:	a2 ee       	ldi	r26, 0xE2	; 226
  96:	b4 e0       	ldi	r27, 0x04	; 4
  98:	14 c0       	rjmp	.+40     	; 0xc2 <reset+0x50>
	
	for(i=0;i<8;i++){
		for(j=0;j<8;j++){
	PORTC=led[i][j];
  9a:	fb 01       	movw	r30, r22
  9c:	e2 0f       	add	r30, r18
  9e:	f3 1f       	adc	r31, r19
  a0:	e0 5a       	subi	r30, 0xA0	; 160
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	80 81       	ld	r24, Z
  a6:	85 bb       	out	0x15, r24	; 21
  a8:	cd 01       	movw	r24, r26
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <reset+0x38>
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
	_delay_ms(1000);
	PORTD=0XFF;
	DDRD=0X00;
	
	for(i=0;i<8;i++){
		for(j=0;j<8;j++){
  b2:	28 30       	cpi	r18, 0x08	; 8
  b4:	31 05       	cpc	r19, r1
  b6:	89 f7       	brne	.-30     	; 0x9a <reset+0x28>
  b8:	4f 5f       	subi	r20, 0xFF	; 255
  ba:	5f 4f       	sbci	r21, 0xFF	; 255
	PORTD=0X00;
	_delay_ms(1000);
	PORTD=0XFF;
	DDRD=0X00;
	
	for(i=0;i<8;i++){
  bc:	48 30       	cpi	r20, 0x08	; 8
  be:	51 05       	cpc	r21, r1
  c0:	49 f0       	breq	.+18     	; 0xd4 <reset+0x62>
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
		for(j=0;j<8;j++){
	PORTC=led[i][j];
  c6:	ba 01       	movw	r22, r20
  c8:	93 e0       	ldi	r25, 0x03	; 3
  ca:	66 0f       	add	r22, r22
  cc:	77 1f       	adc	r23, r23
  ce:	9a 95       	dec	r25
  d0:	e1 f7       	brne	.-8      	; 0xca <reset+0x58>
  d2:	e3 cf       	rjmp	.-58     	; 0x9a <reset+0x28>
  d4:	08 95       	ret

000000d6 <main>:
	}

	
}
int main()				
{
  d6:	af 92       	push	r10
  d8:	bf 92       	push	r11
  da:	cf 92       	push	r12
  dc:	df 92       	push	r13
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	df 93       	push	r29
  e8:	cf 93       	push	r28
  ea:	0f 92       	push	r0
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
while(1){
uint8_t row=4,col=7;
uint8_t portb;
uint8_t i=1,j=-1;
//uint8_t k=3;
DDRC =0xff;
  f0:	ff 24       	eor	r15, r15
  f2:	fa 94       	dec	r15
DDRB=0Xff;
volatile uint8_t m=2;
  f4:	42 e0       	ldi	r20, 0x02	; 2
  f6:	e4 2e       	mov	r14, r20
  f8:	08 ea       	ldi	r16, 0xA8	; 168
  fa:	11 e6       	ldi	r17, 0x61	; 97


m++;
PORTB=led1[m];
if(m>=5)
m=4;
  fc:	3a ef       	ldi	r19, 0xFA	; 250
  fe:	c3 2e       	mov	r12, r19
 100:	d1 2c       	mov	r13, r1
 102:	24 e0       	ldi	r18, 0x04	; 4
 104:	b2 2e       	mov	r11, r18
//PORTA=(1<<0);    // LED on
m--;
PORTB=led1[m];

if(m<=0)
m=1;
 106:	aa 24       	eor	r10, r10
 108:	a3 94       	inc	r10
while(1){
uint8_t row=4,col=7;
uint8_t portb;
uint8_t i=1,j=-1;
//uint8_t k=3;
DDRC =0xff;
 10a:	f4 ba       	out	0x14, r15	; 20
DDRB=0Xff;
 10c:	f7 ba       	out	0x17, r15	; 23
volatile uint8_t m=2;
 10e:	e9 82       	std	Y+1, r14	; 0x01
DDRD=0x00; 
 110:	11 ba       	out	0x11, r1	; 17
PORTB=0XFF;
 112:	f8 ba       	out	0x18, r15	; 24
 114:	c8 01       	movw	r24, r16
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x40>
_delay_ms(100);
PORTB=led1[2]; // initially LED off
 11a:	80 91 a2 00 	lds	r24, 0x00A2
 11e:	88 bb       	out	0x18, r24	; 24

PORTD=0xFF;  // Internal pullup is enabl // PORTD_0 declared as input
 120:	f2 ba       	out	0x12, r15	; 18
				   				   };
volatile uint8_t led1[6]={224,112,56,28,14,7};
void ledon(uint8_t i,uint8_t j)
{
	
	PORTC=led[i][j];
 122:	80 91 87 00 	lds	r24, 0x0087
 126:	85 bb       	out	0x15, r24	; 21
 128:	c8 01       	movw	r24, r16
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x54>
 12e:	c8 01       	movw	r24, r16
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x5a>
 134:	57 e0       	ldi	r21, 0x07	; 7
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	6f ef       	ldi	r22, 0xFF	; 255
 13a:	74 e0       	ldi	r23, 0x04	; 4
 13c:	e7 2f       	mov	r30, r23
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	93 e0       	ldi	r25, 0x03	; 3
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	9a 95       	dec	r25
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x6c>
 14a:	e5 0f       	add	r30, r21
 14c:	f1 1d       	adc	r31, r1
 14e:	e0 5a       	subi	r30, 0xA0	; 160
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	80 81       	ld	r24, Z
 154:	85 bb       	out	0x15, r24	; 21
 156:	c8 01       	movw	r24, r16
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0x82>
//_delay_ms(.1);
//PORTD =0;
//_delay_ms(50);
//PORTB=led1[k];
//k++;
row=row+i;
 15c:	74 0f       	add	r23, r20
col=col+j;
 15e:	56 0f       	add	r21, r22
				   				   };
volatile uint8_t led1[6]={224,112,56,28,14,7};
void ledon(uint8_t i,uint8_t j)
{
	
	PORTC=led[i][j];
 160:	a7 2f       	mov	r26, r23
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	25 2f       	mov	r18, r21
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	fd 01       	movw	r30, r26
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	ee 0f       	add	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	8a 95       	dec	r24
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x96>
 174:	e2 0f       	add	r30, r18
 176:	f3 1f       	adc	r31, r19
 178:	e0 5a       	subi	r30, 0xA0	; 160
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	80 81       	ld	r24, Z
 17e:	85 bb       	out	0x15, r24	; 21
 180:	c8 01       	movw	r24, r16
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0xac>
row=row+i;
col=col+j;
ledon(row,col);


if(row==7)              //last row
 186:	77 30       	cpi	r23, 0x07	; 7
 188:	09 f0       	breq	.+2      	; 0x18c <main+0xb6>
 18a:	8f c0       	rjmp	.+286    	; 0x2aa <main+0x1d4>
	{
	//i=-1;
	if(led[row][col]==56)
 18c:	80 81       	ld	r24, Z
 18e:	88 33       	cpi	r24, 0x38	; 56
 190:	21 f4       	brne	.+8      	; 0x19a <main+0xc4>
	{
		portb=PORTB;
 192:	88 b3       	in	r24, 0x18	; 24
			if((portb==224))
 194:	80 3e       	cpi	r24, 0xE0	; 224
 196:	09 f0       	breq	.+2      	; 0x19a <main+0xc4>
 198:	e9 c0       	rjmp	.+466    	; 0x36c <main+0x296>
				
							
				break;
			}
			}
	if(led[row][col]==57)
 19a:	fd 01       	movw	r30, r26
 19c:	93 e0       	ldi	r25, 0x03	; 3
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	9a 95       	dec	r25
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0xc8>
 1a6:	e2 0f       	add	r30, r18
 1a8:	f3 1f       	adc	r31, r19
 1aa:	e0 5a       	subi	r30, 0xA0	; 160
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	80 81       	ld	r24, Z
 1b0:	89 33       	cpi	r24, 0x39	; 57
 1b2:	31 f4       	brne	.+12     	; 0x1c0 <main+0xea>
		{
		portb=PORTB;
 1b4:	88 b3       	in	r24, 0x18	; 24
			if((portb==224) || (portb==112))
 1b6:	80 3e       	cpi	r24, 0xE0	; 224
 1b8:	19 f0       	breq	.+6      	; 0x1c0 <main+0xea>
 1ba:	80 37       	cpi	r24, 0x70	; 112
 1bc:	09 f0       	breq	.+2      	; 0x1c0 <main+0xea>
 1be:	d6 c0       	rjmp	.+428    	; 0x36c <main+0x296>
							
				break;
			}
			}	
//i=-1;
	if(led[row][col]==58)
 1c0:	fd 01       	movw	r30, r26
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	8a 95       	dec	r24
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0xee>
 1cc:	e2 0f       	add	r30, r18
 1ce:	f3 1f       	adc	r31, r19
 1d0:	e0 5a       	subi	r30, 0xA0	; 160
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	80 81       	ld	r24, Z
 1d6:	8a 33       	cpi	r24, 0x3A	; 58
 1d8:	41 f4       	brne	.+16     	; 0x1ea <main+0x114>
		{
		portb=PORTB;
 1da:	88 b3       	in	r24, 0x18	; 24
			if((portb==224) || (portb==112) || (portb==56))
 1dc:	80 3e       	cpi	r24, 0xE0	; 224
 1de:	29 f0       	breq	.+10     	; 0x1ea <main+0x114>
 1e0:	80 37       	cpi	r24, 0x70	; 112
 1e2:	19 f0       	breq	.+6      	; 0x1ea <main+0x114>
 1e4:	88 33       	cpi	r24, 0x38	; 56
 1e6:	09 f0       	breq	.+2      	; 0x1ea <main+0x114>
 1e8:	c1 c0       	rjmp	.+386    	; 0x36c <main+0x296>
					reset(i,j);
				
							
				break;
			}	}
if(led[row][col]==59)
 1ea:	fd 01       	movw	r30, r26
 1ec:	93 e0       	ldi	r25, 0x03	; 3
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	9a 95       	dec	r25
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0x118>
 1f6:	e2 0f       	add	r30, r18
 1f8:	f3 1f       	adc	r31, r19
 1fa:	e0 5a       	subi	r30, 0xA0	; 160
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	80 81       	ld	r24, Z
 200:	8b 33       	cpi	r24, 0x3B	; 59
 202:	41 f4       	brne	.+16     	; 0x214 <main+0x13e>
		{
		portb=PORTB;
 204:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==112) || (portb==56))
 206:	8c 31       	cpi	r24, 0x1C	; 28
 208:	29 f0       	breq	.+10     	; 0x214 <main+0x13e>
 20a:	80 37       	cpi	r24, 0x70	; 112
 20c:	19 f0       	breq	.+6      	; 0x214 <main+0x13e>
 20e:	88 33       	cpi	r24, 0x38	; 56
 210:	09 f0       	breq	.+2      	; 0x214 <main+0x13e>
 212:	ac c0       	rjmp	.+344    	; 0x36c <main+0x296>
				break;
			
			}	
}

if(led[row][col]==60)
 214:	fd 01       	movw	r30, r26
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	8a 95       	dec	r24
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x142>
 220:	e2 0f       	add	r30, r18
 222:	f3 1f       	adc	r31, r19
 224:	e0 5a       	subi	r30, 0xA0	; 160
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	80 81       	ld	r24, Z
 22a:	8c 33       	cpi	r24, 0x3C	; 60
 22c:	41 f4       	brne	.+16     	; 0x23e <main+0x168>
		{
		portb=PORTB;
 22e:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==14) || (portb==56))
 230:	8c 31       	cpi	r24, 0x1C	; 28
 232:	29 f0       	breq	.+10     	; 0x23e <main+0x168>
 234:	8e 30       	cpi	r24, 0x0E	; 14
 236:	19 f0       	breq	.+6      	; 0x23e <main+0x168>
 238:	88 33       	cpi	r24, 0x38	; 56
 23a:	09 f0       	breq	.+2      	; 0x23e <main+0x168>
 23c:	97 c0       	rjmp	.+302    	; 0x36c <main+0x296>
				
							
				break;
			
			}}
if(led[row][col]==61)
 23e:	fd 01       	movw	r30, r26
 240:	93 e0       	ldi	r25, 0x03	; 3
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	9a 95       	dec	r25
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0x16c>
 24a:	e2 0f       	add	r30, r18
 24c:	f3 1f       	adc	r31, r19
 24e:	e0 5a       	subi	r30, 0xA0	; 160
 250:	ff 4f       	sbci	r31, 0xFF	; 255
 252:	80 81       	ld	r24, Z
 254:	8d 33       	cpi	r24, 0x3D	; 61
 256:	41 f4       	brne	.+16     	; 0x268 <main+0x192>
		{
		portb=PORTB;
 258:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==14) || (portb==7))
 25a:	8c 31       	cpi	r24, 0x1C	; 28
 25c:	29 f0       	breq	.+10     	; 0x268 <main+0x192>
 25e:	8e 30       	cpi	r24, 0x0E	; 14
 260:	19 f0       	breq	.+6      	; 0x268 <main+0x192>
 262:	87 30       	cpi	r24, 0x07	; 7
 264:	09 f0       	breq	.+2      	; 0x268 <main+0x192>
 266:	82 c0       	rjmp	.+260    	; 0x36c <main+0x296>
							
				break;
			
				}	
	}
if(led[row][col]==62)
 268:	fd 01       	movw	r30, r26
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	ee 0f       	add	r30, r30
 26e:	ff 1f       	adc	r31, r31
 270:	8a 95       	dec	r24
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x196>
 274:	e2 0f       	add	r30, r18
 276:	f3 1f       	adc	r31, r19
 278:	e0 5a       	subi	r30, 0xA0	; 160
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	80 81       	ld	r24, Z
 27e:	8e 33       	cpi	r24, 0x3E	; 62
 280:	31 f4       	brne	.+12     	; 0x28e <main+0x1b8>
		{
		portb=PORTB;
 282:	88 b3       	in	r24, 0x18	; 24
			if((portb==14) || (portb==7))
 284:	8e 30       	cpi	r24, 0x0E	; 14
 286:	19 f0       	breq	.+6      	; 0x28e <main+0x1b8>
 288:	87 30       	cpi	r24, 0x07	; 7
 28a:	09 f0       	breq	.+2      	; 0x28e <main+0x1b8>
 28c:	6f c0       	rjmp	.+222    	; 0x36c <main+0x296>
				
							
				break;
			
			}}	
if(led[row][col]==63)
 28e:	e3 e0       	ldi	r30, 0x03	; 3
 290:	aa 0f       	add	r26, r26
 292:	bb 1f       	adc	r27, r27
 294:	ea 95       	dec	r30
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0x1ba>
 298:	a2 0f       	add	r26, r18
 29a:	b3 1f       	adc	r27, r19
 29c:	a0 5a       	subi	r26, 0xA0	; 160
 29e:	bf 4f       	sbci	r27, 0xFF	; 255
 2a0:	8c 91       	ld	r24, X
 2a2:	8f 33       	cpi	r24, 0x3F	; 63
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <main+0x1d2>
 2a6:	65 c0       	rjmp	.+202    	; 0x372 <main+0x29c>
 2a8:	5e c0       	rjmp	.+188    	; 0x366 <main+0x290>
	PORTD =0;*/



	}
if(row==0)				//ist row
 2aa:	77 23       	and	r23, r23
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <main+0x1da>
 2ae:	62 c0       	rjmp	.+196    	; 0x374 <main+0x29e>
	{
	
	if(led[row][col]==0)
 2b0:	f9 01       	movw	r30, r18
 2b2:	e0 5a       	subi	r30, 0xA0	; 160
 2b4:	ff 4f       	sbci	r31, 0xFF	; 255
 2b6:	80 81       	ld	r24, Z
 2b8:	88 23       	and	r24, r24
 2ba:	21 f4       	brne	.+8      	; 0x2c4 <main+0x1ee>
	{
		portb=PORTB;
 2bc:	88 b3       	in	r24, 0x18	; 24
			if((portb==224))
 2be:	80 3e       	cpi	r24, 0xE0	; 224
 2c0:	09 f0       	breq	.+2      	; 0x2c4 <main+0x1ee>
 2c2:	54 c0       	rjmp	.+168    	; 0x36c <main+0x296>
				
							
				break;
			}
			}
	if(led[row][col]==1)
 2c4:	f9 01       	movw	r30, r18
 2c6:	e0 5a       	subi	r30, 0xA0	; 160
 2c8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ca:	80 81       	ld	r24, Z
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	31 f4       	brne	.+12     	; 0x2dc <main+0x206>
		{
		portb=PORTB;
 2d0:	88 b3       	in	r24, 0x18	; 24
			if((portb==224) || (portb==112))
 2d2:	80 3e       	cpi	r24, 0xE0	; 224
 2d4:	19 f0       	breq	.+6      	; 0x2dc <main+0x206>
 2d6:	80 37       	cpi	r24, 0x70	; 112
 2d8:	09 f0       	breq	.+2      	; 0x2dc <main+0x206>
 2da:	48 c0       	rjmp	.+144    	; 0x36c <main+0x296>
							
				break;
			}
			}	
//i=-1;
	if(led[row][col]==2)
 2dc:	f9 01       	movw	r30, r18
 2de:	e0 5a       	subi	r30, 0xA0	; 160
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	80 81       	ld	r24, Z
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	39 f4       	brne	.+14     	; 0x2f6 <main+0x220>
		{
		portb=PORTB;
 2e8:	88 b3       	in	r24, 0x18	; 24
			if((portb==224) || (portb==112) || (portb==56))
 2ea:	80 3e       	cpi	r24, 0xE0	; 224
 2ec:	21 f0       	breq	.+8      	; 0x2f6 <main+0x220>
 2ee:	80 37       	cpi	r24, 0x70	; 112
 2f0:	11 f0       	breq	.+4      	; 0x2f6 <main+0x220>
 2f2:	88 33       	cpi	r24, 0x38	; 56
 2f4:	d9 f5       	brne	.+118    	; 0x36c <main+0x296>
					reset(i,j);
				
							
				break;
			}	}
if(led[row][col]==3)
 2f6:	f9 01       	movw	r30, r18
 2f8:	e0 5a       	subi	r30, 0xA0	; 160
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	80 81       	ld	r24, Z
 2fe:	83 30       	cpi	r24, 0x03	; 3
 300:	39 f4       	brne	.+14     	; 0x310 <main+0x23a>
		{
		portb=PORTB;
 302:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==112) || (portb==56))
 304:	8c 31       	cpi	r24, 0x1C	; 28
 306:	21 f0       	breq	.+8      	; 0x310 <main+0x23a>
 308:	80 37       	cpi	r24, 0x70	; 112
 30a:	11 f0       	breq	.+4      	; 0x310 <main+0x23a>
 30c:	88 33       	cpi	r24, 0x38	; 56
 30e:	71 f5       	brne	.+92     	; 0x36c <main+0x296>
				break;
			
			}	
}

if(led[row][col]==4)
 310:	f9 01       	movw	r30, r18
 312:	e0 5a       	subi	r30, 0xA0	; 160
 314:	ff 4f       	sbci	r31, 0xFF	; 255
 316:	80 81       	ld	r24, Z
 318:	84 30       	cpi	r24, 0x04	; 4
 31a:	39 f4       	brne	.+14     	; 0x32a <main+0x254>
		{
		portb=PORTB;
 31c:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==14) || (portb==56))
 31e:	8c 31       	cpi	r24, 0x1C	; 28
 320:	21 f0       	breq	.+8      	; 0x32a <main+0x254>
 322:	8e 30       	cpi	r24, 0x0E	; 14
 324:	11 f0       	breq	.+4      	; 0x32a <main+0x254>
 326:	88 33       	cpi	r24, 0x38	; 56
 328:	09 f5       	brne	.+66     	; 0x36c <main+0x296>
				
							
				break;
			
			}}
if(led[row][col]==5)
 32a:	f9 01       	movw	r30, r18
 32c:	e0 5a       	subi	r30, 0xA0	; 160
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
 330:	80 81       	ld	r24, Z
 332:	85 30       	cpi	r24, 0x05	; 5
 334:	39 f4       	brne	.+14     	; 0x344 <main+0x26e>
		{
		portb=PORTB;
 336:	88 b3       	in	r24, 0x18	; 24
			if((portb==28) || (portb==14) || (portb==7))
 338:	8c 31       	cpi	r24, 0x1C	; 28
 33a:	21 f0       	breq	.+8      	; 0x344 <main+0x26e>
 33c:	8e 30       	cpi	r24, 0x0E	; 14
 33e:	11 f0       	breq	.+4      	; 0x344 <main+0x26e>
 340:	87 30       	cpi	r24, 0x07	; 7
 342:	a1 f4       	brne	.+40     	; 0x36c <main+0x296>
							
				break;
			
				}	
	}
if(led[row][col]==6)
 344:	f9 01       	movw	r30, r18
 346:	e0 5a       	subi	r30, 0xA0	; 160
 348:	ff 4f       	sbci	r31, 0xFF	; 255
 34a:	80 81       	ld	r24, Z
 34c:	86 30       	cpi	r24, 0x06	; 6
 34e:	29 f4       	brne	.+10     	; 0x35a <main+0x284>
		{
		portb=PORTB;
 350:	88 b3       	in	r24, 0x18	; 24
			if((portb==14) || (portb==7))
 352:	8e 30       	cpi	r24, 0x0E	; 14
 354:	11 f0       	breq	.+4      	; 0x35a <main+0x284>
 356:	87 30       	cpi	r24, 0x07	; 7
 358:	49 f4       	brne	.+18     	; 0x36c <main+0x296>
				
							
				break;
			
			}}	
if(led[row][col]==7)
 35a:	20 5a       	subi	r18, 0xA0	; 160
 35c:	3f 4f       	sbci	r19, 0xFF	; 255
 35e:	f9 01       	movw	r30, r18
 360:	80 81       	ld	r24, Z
 362:	87 30       	cpi	r24, 0x07	; 7
 364:	31 f4       	brne	.+12     	; 0x372 <main+0x29c>
		{
		portb=PORTB;
 366:	88 b3       	in	r24, 0x18	; 24
			if((portb==7))
 368:	87 30       	cpi	r24, 0x07	; 7
 36a:	19 f0       	breq	.+6      	; 0x372 <main+0x29c>
				_delay_ms(10);
				PORTD =0;*/
			}	
			else{
		
					reset(i,j);
 36c:	84 2f       	mov	r24, r20
 36e:	81 de       	rcall	.-766    	; 0x72 <reset>
 370:	cc ce       	rjmp	.-616    	; 0x10a <main+0x34>



	
	row=0;
	i=-i;
 372:	41 95       	neg	r20
	/*PORTD =0XFF;
	_delay_ms(5);
	PORTD =0;*/
	}
if(col==0)
 374:	55 23       	and	r21, r21
 376:	19 f4       	brne	.+6      	; 0x37e <main+0x2a8>
	{
	col=1;
	j=-j;
 378:	61 95       	neg	r22
 37a:	51 e0       	ldi	r21, 0x01	; 1
 37c:	04 c0       	rjmp	.+8      	; 0x386 <main+0x2b0>
	/*PORTD =0XFF;
	_delay_ms(5);
	PORTD =0;*/	
	}
if(col==7)
 37e:	57 30       	cpi	r21, 0x07	; 7
 380:	11 f4       	brne	.+4      	; 0x386 <main+0x2b0>
	{
	col=6;
	j=-j;
 382:	61 95       	neg	r22
 384:	56 e0       	ldi	r21, 0x06	; 6
	/*PORTD =0XFF;
	_delay_ms(5);
	PORTD =0;*/	
	}
if(!(PIND & 0x01))  // check whether the switch is pressed or not
 386:	80 99       	sbic	0x10, 0	; 16
 388:	12 c0       	rjmp	.+36     	; 0x3ae <main+0x2d8>

{

while(!(PIND & 0x01)); //wait for debounce
 38a:	80 9b       	sbis	0x10, 0	; 16
 38c:	fe cf       	rjmp	.-4      	; 0x38a <main+0x2b4>

//PORTA=(1<<1);    // LED on


m++;
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	89 83       	std	Y+1, r24	; 0x01
PORTB=led1[m];
 394:	e9 81       	ldd	r30, Y+1	; 0x01
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	e0 56       	subi	r30, 0x60	; 96
 39a:	ff 4f       	sbci	r31, 0xFF	; 255
 39c:	80 81       	ld	r24, Z
 39e:	88 bb       	out	0x18, r24	; 24
if(m>=5)
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	85 30       	cpi	r24, 0x05	; 5
 3a4:	08 f0       	brcs	.+2      	; 0x3a8 <main+0x2d2>
m=4;
 3a6:	b9 82       	std	Y+1, r11	; 0x01
 3a8:	c6 01       	movw	r24, r12
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <main+0x2d4>
_delay_ms(1);   // On for a half second

//PORTA=0x00;    // LED turns off
}  // if ends here
if(!(PIND & 0x02))  // check whether the switch is pressed or not
 3ae:	81 99       	sbic	0x10, 1	; 16
 3b0:	c5 ce       	rjmp	.-630    	; 0x13c <main+0x66>

{

while(!(PIND & 0x02)); //wait for debounce
 3b2:	81 9b       	sbis	0x10, 1	; 16
 3b4:	fe cf       	rjmp	.-4      	; 0x3b2 <main+0x2dc>

//PORTA=(1<<0);    // LED on
m--;
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	81 50       	subi	r24, 0x01	; 1
 3ba:	89 83       	std	Y+1, r24	; 0x01
PORTB=led1[m];
 3bc:	e9 81       	ldd	r30, Y+1	; 0x01
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	e0 56       	subi	r30, 0x60	; 96
 3c2:	ff 4f       	sbci	r31, 0xFF	; 255
 3c4:	80 81       	ld	r24, Z
 3c6:	88 bb       	out	0x18, r24	; 24

if(m<=0)
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	88 23       	and	r24, r24
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <main+0x2fa>
m=1;
 3ce:	a9 82       	std	Y+1, r10	; 0x01
 3d0:	c6 01       	movw	r24, r12
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <main+0x2fc>
 3d6:	b2 ce       	rjmp	.-668    	; 0x13c <main+0x66>

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
